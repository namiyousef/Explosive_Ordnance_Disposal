

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Dec 10 12:17:08 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4331 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  000EE8                     __pidataCOMRAM:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _index
    83  000EE8  01                 	db	1
    84                           
    85                           	psect	idataBANK0
    86  000EE9                     __pidataBANK0:
    87                           	opt callstack 0
    88                           
    89                           ;initializer for _reset
    90  000EE9  01                 	db	1
    91  0000                     _CAP3BUFH	set	3941
    92  0000                     _CAP3BUFL	set	3940
    93  0000                     _CAP2BUFH	set	3943
    94  0000                     _CAP2BUFL	set	3942
    95  0000                     _T5CON	set	4023
    96  0000                     _CAP3CON	set	3937
    97  0000                     _CAP2CON	set	3938
    98  0000                     _ANSEL1	set	4025
    99  0000                     _ANSEL0	set	4024
   100  0000                     _TRISAbits	set	3986
   101  0000                     _LATAbits	set	3977
   102  0000                     _LATD	set	3980
   103  0000                     _LATC	set	3979
   104  0000                     _LATB	set	3978
   105  0000                     _PDC3H	set	3954
   106  0000                     _PDC3L	set	3955
   107  0000                     _PDC2H	set	3956
   108  0000                     _PDC2L	set	3957
   109  0000                     _PTPERH	set	3962
   110  0000                     _PTPERL	set	3963
   111  0000                     _PWMCON1	set	3950
   112  0000                     _PWMCON0	set	3951
   113  0000                     _PTCON1	set	3966
   114  0000                     _PTCON0	set	3967
   115  0000                     _TRISBbits	set	3987
   116  0000                     _LATBbits	set	3978
   117  0000                     _RCSTAbits	set	4011
   118  0000                     _TXSTAbits	set	4012
   119  0000                     _BAUDCONbits	set	4010
   120  0000                     _SPBRGH	set	4016
   121  0000                     _SPBRG	set	4015
   122  0000                     _RCREG	set	4014
   123  0000                     _PIR1bits	set	3998
   124  0000                     _IPR1bits	set	3999
   125  0000                     _PIE1bits	set	3997
   126  0000                     _RCONbits	set	4048
   127  0000                     _INTCONbits	set	4082
   128  0000                     _PIR1	set	3998
   129  0000                     _TRISDbits	set	3989
   130  0000                     _TRISCbits	set	3988
   131  0000                     _LATDbits	set	3980
   132  0000                     _LATCbits	set	3979
   133  0000                     _OSCCONbits	set	4051
   134  0000                     _OSCCON	set	4051
   135  0000                     _PDC1H	set	3958
   136  0000                     _PDC1L	set	3959
   137  0000                     _PDC0H	set	3960
   138  0000                     _PDC0L	set	3961
   139                           
   140                           	psect	smallconst
   141  000300                     __psmallconst:
   142                           	opt callstack 0
   143  000300  00                 	db	0
   144  000301                     STR_2:
   145  000301  4E                 	db	78	;'N'
   146  000302  6F                 	db	111	;'o'
   147  000303  20                 	db	32
   148  000304  4D                 	db	77	;'M'
   149  000305  61                 	db	97	;'a'
   150  000306  74                 	db	116	;'t'
   151  000307  63                 	db	99	;'c'
   152  000308  68                 	db	104	;'h'
   153  000309  00                 	db	0
   154  0000                     
   155                           ; #config settings
   156  00030A  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           	psect	cinit
   159  000CEA                     __pcinit:
   160                           	opt callstack 0
   161  000CEA                     start_initialization:
   162                           	opt callstack 0
   163  000CEA                     __initialization:
   164                           	opt callstack 0
   165                           
   166                           ; Initialize objects allocated to BANK0 (1 bytes)
   167                           ; load TBLPTR registers with __pidataBANK0
   168  000CEA  0EE9               	movlw	low __pidataBANK0
   169  000CEC  6EF6               	movwf	tblptrl,c
   170  000CEE  0E0E               	movlw	high __pidataBANK0
   171  000CF0  6EF7               	movwf	tblptrh,c
   172  000CF2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   173  000CF4  6EF8               	movwf	tblptru,c
   174  000CF6  0009               	tblrd		*+	;fetch initializer
   175  000CF8  CFF5 F0FF          	movff	tablat,__pdataBANK0
   176                           
   177                           ; Initialize objects allocated to COMRAM (1 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179  000CFC  0EE8               	movlw	low __pidataCOMRAM
   180  000CFE  6EF6               	movwf	tblptrl,c
   181  000D00  0E0E               	movlw	high __pidataCOMRAM
   182  000D02  6EF7               	movwf	tblptrh,c
   183  000D04  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184  000D06  6EF8               	movwf	tblptru,c
   185  000D08  0009               	tblrd		*+	;fetch initializer
   186  000D0A  CFF5 F033          	movff	tablat,__pdataCOMRAM
   187                           
   188                           ; Clear objects allocated to BANK0 (3 bytes)
   189  000D0E  0100               	movlb	0
   190  000D10  6BFE               	clrf	(__pbssBANK0+2)& (0+255),b
   191  000D12  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   192  000D14  6BFC               	clrf	__pbssBANK0& (0+255),b
   193                           
   194                           ; Clear objects allocated to COMRAM (4 bytes)
   195  000D16  6A32               	clrf	(__pbssCOMRAM+3)& (0+255),c
   196  000D18  6A31               	clrf	(__pbssCOMRAM+2)& (0+255),c
   197  000D1A  6A30               	clrf	(__pbssCOMRAM+1)& (0+255),c
   198  000D1C  6A2F               	clrf	__pbssCOMRAM& (0+255),c
   199  000D1E                     end_of_initialization:
   200                           	opt callstack 0
   201  000D1E                     __end_of__initialization:
   202                           	opt callstack 0
   203  000D1E  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   204  000D20  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   205  000D22  0E00               	movlw	low (__Lsmallconst shr (0+16))
   206  000D24  6EF8               	movwf	tblptru,c
   207  000D26  0E03               	movlw	high __Lsmallconst
   208  000D28  6EF7               	movwf	tblptrh,c
   209  000D2A  0100               	movlb	0
   210  000D2C  EF86  F001         	goto	_main	;jump to C main() function
   211                           
   212                           	psect	bssCOMRAM
   213  00002F                     __pbssCOMRAM:
   214                           	opt callstack 0
   215  00002F                     _a:
   216                           	opt callstack 0
   217  00002F                     	ds	1
   218  000030                     _checkSum:
   219                           	opt callstack 0
   220  000030                     	ds	1
   221  000031                     _currentVal:
   222                           	opt callstack 0
   223  000031                     	ds	1
   224  000032                     _debouncer:
   225                           	opt callstack 0
   226  000032                     	ds	1
   227                           
   228                           	psect	dataCOMRAM
   229  000033                     __pdataCOMRAM:
   230                           	opt callstack 0
   231  000033                     _index:
   232                           	opt callstack 0
   233  000033                     	ds	1
   234                           
   235                           	psect	bssBANK0
   236  0000FC                     __pbssBANK0:
   237                           	opt callstack 0
   238  0000FC                     _IRsource:
   239                           	opt callstack 0
   240  0000FC                     	ds	1
   241  0000FD                     _RFIDread:
   242                           	opt callstack 0
   243  0000FD                     	ds	1
   244  0000FE                     _robotOn:
   245                           	opt callstack 0
   246  0000FE                     	ds	1
   247                           
   248                           	psect	dataBANK0
   249  0000FF                     __pdataBANK0:
   250                           	opt callstack 0
   251  0000FF                     _reset:
   252                           	opt callstack 0
   253  0000FF                     	ds	1
   254                           
   255                           	psect	cstackBANK0
   256  000060                     __pcstackBANK0:
   257                           	opt callstack 0
   258  000060                     main@path:
   259                           	opt callstack 0
   260                           
   261                           ; 130 bytes @ 0x0
   262  000060                     	ds	130
   263  0000E2                     main@buffer:
   264                           	opt callstack 0
   265                           
   266                           ; 2 bytes @ 0x82
   267  0000E2                     	ds	2
   268  0000E4                     main@c:
   269                           	opt callstack 0
   270                           
   271                           ; 1 bytes @ 0x84
   272  0000E4                     	ds	1
   273  0000E5                     main@leftIR:
   274                           	opt callstack 0
   275                           
   276                           ; 2 bytes @ 0x85
   277  0000E5                     	ds	2
   278  0000E7                     main@rightIR:
   279                           	opt callstack 0
   280                           
   281                           ; 2 bytes @ 0x87
   282  0000E7                     	ds	2
   283  0000E9                     main@i:
   284                           	opt callstack 0
   285                           
   286                           ; 1 bytes @ 0x89
   287  0000E9                     	ds	1
   288  0000EA                     main@motorR:
   289                           	opt callstack 0
   290                           
   291                           ; 9 bytes @ 0x8A
   292  0000EA                     	ds	9
   293  0000F3                     main@motorL:
   294                           	opt callstack 0
   295                           
   296                           ; 9 bytes @ 0x93
   297  0000F3                     	ds	9
   298                           
   299                           	psect	cstackCOMRAM
   300  000001                     __pcstackCOMRAM:
   301                           	opt callstack 0
   302  000001                     ??_my_hp_isr:
   303  000001                     
   304                           ; 1 bytes @ 0x0
   305  000001                     	ds	1
   306  000002                     ??i1_LCDout:
   307                           
   308                           ; 1 bytes @ 0x1
   309  000002                     	ds	2
   310  000004                     i1LCDout@number:
   311                           	opt callstack 0
   312                           
   313                           ; 1 bytes @ 0x3
   314  000004                     	ds	1
   315  000005                     i1SendLCD@type:
   316                           	opt callstack 0
   317                           
   318                           ; 1 bytes @ 0x4
   319  000005                     	ds	1
   320  000006                     i1SendLCD@HighBits:
   321                           	opt callstack 0
   322                           
   323                           ; 1 bytes @ 0x5
   324  000006                     	ds	1
   325  000007                     i1SendLCD@LowBits:
   326                           	opt callstack 0
   327                           
   328                           ; 1 bytes @ 0x6
   329  000007                     	ds	1
   330  000008                     i1SendLCD@Byte:
   331                           	opt callstack 0
   332                           
   333                           ; 1 bytes @ 0x7
   334  000008                     	ds	1
   335  000009                     SetLine@line:
   336                           	opt callstack 0
   337  000009                     LCD_String@string:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0x8
   341  000009                     	ds	2
   342  00000B                     ??_LCD_String:
   343                           
   344                           ; 1 bytes @ 0xA
   345  00000B                     	ds	1
   346  00000C                     ??_my_lp_isr:
   347                           
   348                           ; 1 bytes @ 0xB
   349  00000C                     	ds	8
   350  000014                     ??_LCDout:
   351  000014                     ?___wmul:
   352                           	opt callstack 0
   353  000014                     findStrengths@leftIR:
   354                           	opt callstack 0
   355  000014                     ___wmul@multiplier:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0x13
   359  000014                     	ds	2
   360  000016                     LCDout@number:
   361                           	opt callstack 0
   362  000016                     findStrengths@rightIR:
   363                           	opt callstack 0
   364  000016                     ___wmul@multiplicand:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x15
   368  000016                     	ds	1
   369  000017                     SendLCD@type:
   370                           	opt callstack 0
   371                           
   372                           ; 1 bytes @ 0x16
   373  000017                     	ds	1
   374  000018                     ??_findStrengths:
   375  000018                     SendLCD@HighBits:
   376                           	opt callstack 0
   377  000018                     ___wmul@product:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0x17
   381  000018                     	ds	1
   382  000019                     SendLCD@LowBits:
   383                           	opt callstack 0
   384                           
   385                           ; 1 bytes @ 0x18
   386  000019                     	ds	1
   387  00001A                     SendLCD@Byte:
   388                           	opt callstack 0
   389  00001A                     setMotorPWM@m:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x19
   393  00001A                     	ds	1
   394  00001B                     ??_initLCD:
   395                           
   396                           ; 1 bytes @ 0x1A
   397  00001B                     	ds	1
   398  00001C                     ??_setMotorPWM:
   399                           
   400                           ; 1 bytes @ 0x1B
   401  00001C                     	ds	4
   402  000020                     setMotorPWM@PWMduty:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x1F
   406  000020                     	ds	2
   407  000022                     setMotorsFullSpeed@mL:
   408                           	opt callstack 0
   409  000022                     stop@mL:
   410                           	opt callstack 0
   411                           
   412                           ; 2 bytes @ 0x21
   413  000022                     	ds	2
   414  000024                     setMotorsFullSpeed@mR:
   415                           	opt callstack 0
   416  000024                     stop@mR:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x23
   420  000024                     	ds	2
   421  000026                     ??_stop:
   422  000026                     ??_setMotorsFullSpeed:
   423                           
   424                           ; 1 bytes @ 0x25
   425  000026                     	ds	1
   426  000027                     move@mL:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x26
   430  000027                     	ds	2
   431  000029                     move@mR:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x28
   435  000029                     	ds	2
   436  00002B                     move@dir:
   437                           	opt callstack 0
   438                           
   439                           ; 1 bytes @ 0x2A
   440  00002B                     	ds	1
   441  00002C                     ??_main:
   442                           
   443                           ; 1 bytes @ 0x2B
   444  00002C                     	ds	3
   445                           
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 56 in file "main.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;  path          130    0[BANK0 ] unsigned char [130]
   456 ;;  motorL          9  147[BANK0 ] struct DC_motor
   457 ;;  motorR          9  138[BANK0 ] struct DC_motor
   458 ;;  rightIR         2  135[BANK0 ] int 
   459 ;;  leftIR          2  133[BANK0 ] int 
   460 ;;  buffer          2  130[BANK0 ] int 
   461 ;;  i               1  137[BANK0 ] unsigned char 
   462 ;;  c               1  132[BANK0 ] unsigned char 
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   472 ;;      Params:         0       0       0       0
   473 ;;      Locals:         0     156       0       0
   474 ;;      Temps:          3       0       0       0
   475 ;;      Totals:         3     156       0       0
   476 ;;Total ram usage:      159 bytes
   477 ;; Hardware stack levels required when called:   11
   478 ;; This function calls:
   479 ;;		_findStrengths
   480 ;;		_initEusart
   481 ;;		_initIR
   482 ;;		_initLCD
   483 ;;		_initPWM
   484 ;;		_move
   485 ;;		_setMotorPWM
   486 ;;		_stop
   487 ;; This function is called by:
   488 ;;		Startup code after reset
   489 ;; This function uses a non-reentrant model
   490 ;;
   491                           
   492                           	psect	text0
   493  00030C                     __ptext0:
   494                           	opt callstack 0
   495  00030C                     _main:
   496                           	opt callstack 20
   497  00030C  0E72               	movlw	114
   498  00030E  6ED3               	movwf	211,c	;volatile
   499  000310                     l67:
   500  000310  A4D3               	btfss	211,2,c	;volatile
   501  000312  EF8D  F001         	goto	u721
   502  000316  EF8F  F001         	goto	u720
   503  00031A                     u721:
   504  00031A  EF88  F001         	goto	l67
   505  00031E                     u720:
   506  00031E  968B               	bcf	139,3,c	;volatile
   507  000320  988B               	bcf	139,4,c	;volatile
   508  000322  948C               	bcf	140,2,c	;volatile
   509  000324  8694               	bsf	148,3,c	;volatile
   510  000326  9894               	bcf	148,4,c	;volatile
   511  000328  9495               	bcf	149,2,c	;volatile
   512  00032A  0E00               	movlw	0
   513  00032C  6E9E               	movwf	158,c	;volatile
   514  00032E  8EF2               	bsf	242,7,c	;volatile
   515  000330  8CF2               	bsf	242,6,c	;volatile
   516  000332  8ED0               	bsf	208,7,c	;volatile
   517  000334  88F2               	bsf	242,4,c	;volatile
   518  000336  8A9D               	bsf	157,5,c	;volatile
   519  000338  9A9F               	bcf	159,5,c	;volatile
   520  00033A  EC51  F007         	call	_initEusart	;wreg free
   521  00033E  EC7F  F005         	call	_initPWM	;wreg free
   522  000342  ECE4  F004         	call	_initLCD	;wreg free
   523  000346  EC42  F007         	call	_initIR	;wreg free
   524  00034A                     
   525                           ;main.c: 110:     struct DC_motor motorL, motorR;;main.c: 113:     motorR.power = 0;
   526  00034A  0E00               	movlw	0
   527  00034C  0100               	movlb	0	; () banked
   528  00034E  6FEA               	movwf	main@motorR& (0+255),b
   529  000350                     
   530                           ; BSR set to: 0
   531                           ;main.c: 114:     motorR.direction = 0;
   532  000350  0E00               	movlw	0
   533  000352  6FEB               	movwf	(main@motorR+1)& (0+255),b
   534                           
   535                           ;main.c: 115:     motorR.dutyLowByte = (unsigned char *) (&PDC0L);
   536  000354  0E79               	movlw	121
   537  000356  6FEC               	movwf	(main@motorR+2)& (0+255),b
   538  000358  0E0F               	movlw	15
   539  00035A  6FED               	movwf	(main@motorR+3)& (0+255),b
   540                           
   541                           ;main.c: 116:     motorR.dutyHighByte = (unsigned char *) (&PDC0H);
   542  00035C  0E78               	movlw	120
   543  00035E  6FEE               	movwf	(main@motorR+4)& (0+255),b
   544  000360  0E0F               	movlw	15
   545  000362  6FEF               	movwf	(main@motorR+5)& (0+255),b
   546  000364                     
   547                           ; BSR set to: 0
   548                           ;main.c: 117:     motorR.dir_pin = 0;
   549  000364  0E00               	movlw	0
   550  000366  6FF0               	movwf	(main@motorR+6)& (0+255),b
   551  000368                     
   552                           ; BSR set to: 0
   553                           ;main.c: 118:     motorR.PWMperiod = 199;
   554  000368  0E00               	movlw	0
   555  00036A  6FF2               	movwf	(main@motorR+8)& (0+255),b
   556  00036C  0EC7               	movlw	199
   557  00036E  6FF1               	movwf	(main@motorR+7)& (0+255),b
   558  000370                     
   559                           ; BSR set to: 0
   560                           ;main.c: 121:     motorL.power = 0;
   561  000370  0E00               	movlw	0
   562  000372  6FF3               	movwf	main@motorL& (0+255),b
   563  000374                     
   564                           ; BSR set to: 0
   565                           ;main.c: 122:     motorL.direction = 0;
   566  000374  0E00               	movlw	0
   567  000376  6FF4               	movwf	(main@motorL+1)& (0+255),b
   568                           
   569                           ;main.c: 123:     motorL.dutyLowByte = (unsigned char *) (&PDC1L);
   570  000378  0E77               	movlw	119
   571  00037A  6FF5               	movwf	(main@motorL+2)& (0+255),b
   572  00037C  0E0F               	movlw	15
   573  00037E  6FF6               	movwf	(main@motorL+3)& (0+255),b
   574                           
   575                           ;main.c: 124:     motorL.dutyHighByte = (unsigned char *) (&PDC1H);
   576  000380  0E76               	movlw	118
   577  000382  6FF7               	movwf	(main@motorL+4)& (0+255),b
   578  000384  0E0F               	movlw	15
   579  000386  6FF8               	movwf	(main@motorL+5)& (0+255),b
   580  000388                     
   581                           ; BSR set to: 0
   582                           ;main.c: 125:     motorL.dir_pin = 2;
   583  000388  0E02               	movlw	2
   584  00038A  6FF9               	movwf	(main@motorL+6)& (0+255),b
   585  00038C                     
   586                           ; BSR set to: 0
   587                           ;main.c: 126:     motorL.PWMperiod = 199;
   588  00038C  0E00               	movlw	0
   589  00038E  6FFB               	movwf	(main@motorL+8)& (0+255),b
   590  000390  0EC7               	movlw	199
   591  000392  6FFA               	movwf	(main@motorL+7)& (0+255),b
   592  000394                     
   593                           ; BSR set to: 0
   594                           ;main.c: 130:     setMotorPWM(&motorL);
   595  000394  0EF3               	movlw	low main@motorL
   596  000396  6E1A               	movwf	setMotorPWM@m^0,c
   597  000398  0E00               	movlw	high main@motorL
   598  00039A  6E1B               	movwf	(setMotorPWM@m+1)^0,c
   599  00039C  EC8B  F003         	call	_setMotorPWM	;wreg free
   600  0003A0                     
   601                           ;main.c: 131:     setMotorPWM(&motorR);
   602  0003A0  0EEA               	movlw	low main@motorR
   603  0003A2  6E1A               	movwf	setMotorPWM@m^0,c
   604  0003A4  0E00               	movlw	high main@motorR
   605  0003A6  6E1B               	movwf	(setMotorPWM@m+1)^0,c
   606  0003A8  EC8B  F003         	call	_setMotorPWM	;wreg free
   607  0003AC                     
   608                           ;main.c: 134:     int leftIR;;main.c: 135:     int rightIR;;main.c: 137:     char i = 0;
   609  0003AC  0E00               	movlw	0
   610  0003AE  0100               	movlb	0	; () banked
   611  0003B0  6FE9               	movwf	main@i& (0+255),b
   612  0003B2                     
   613                           ; BSR set to: 0
   614                           ;main.c: 138:     char path[130];;main.c: 140:     char c = 0;
   615  0003B2  0E00               	movlw	0
   616  0003B4  6FE4               	movwf	main@c& (0+255),b
   617  0003B6                     
   618                           ; BSR set to: 0
   619                           ;main.c: 142:     int buffer = 800;
   620  0003B6  0E03               	movlw	3
   621  0003B8  6FE3               	movwf	(main@buffer+1)& (0+255),b
   622  0003BA  0E20               	movlw	32
   623  0003BC  6FE2               	movwf	main@buffer& (0+255),b
   624  0003BE                     l1677:
   625                           
   626                           ;main.c: 146:         if (robotOn == 1) {
   627  0003BE  0100               	movlb	0	; () banked
   628  0003C0  05FE               	decf	_robotOn& (0+255),w,b
   629  0003C2  A4D8               	btfss	status,2,c
   630  0003C4  EFE6  F001         	goto	u731
   631  0003C8  EFE8  F001         	goto	u730
   632  0003CC                     u731:
   633  0003CC  EF5C  F003         	goto	l1763
   634  0003D0                     u730:
   635  0003D0                     
   636                           ; BSR set to: 0
   637                           ;main.c: 152:             leftIR = 0;
   638  0003D0  0E00               	movlw	0
   639  0003D2  6FE6               	movwf	(main@leftIR+1)& (0+255),b
   640  0003D4  0E00               	movlw	0
   641  0003D6  6FE5               	movwf	main@leftIR& (0+255),b
   642                           
   643                           ;main.c: 153:             rightIR = 0;
   644  0003D8  0E00               	movlw	0
   645  0003DA  6FE8               	movwf	(main@rightIR+1)& (0+255),b
   646  0003DC  0E00               	movlw	0
   647  0003DE  6FE7               	movwf	main@rightIR& (0+255),b
   648                           
   649                           ;main.c: 155:             while ((leftIR < 1500 || rightIR < 1500) && robotOn == 1 && IR
      +                          source == 0) {
   650  0003E0  EF12  F002         	goto	l1689
   651  0003E4                     l1681:
   652                           
   653                           ; BSR set to: 0
   654                           ;main.c: 157:                 findStrengths(&leftIR, &rightIR);
   655  0003E4  0EE5               	movlw	low main@leftIR
   656  0003E6  6E14               	movwf	findStrengths@leftIR^0,c
   657  0003E8  0E00               	movlw	high main@leftIR
   658  0003EA  6E15               	movwf	(findStrengths@leftIR+1)^0,c
   659  0003EC  0EE7               	movlw	low main@rightIR
   660  0003EE  6E16               	movwf	findStrengths@rightIR^0,c
   661  0003F0  0E00               	movlw	high main@rightIR
   662  0003F2  6E17               	movwf	(findStrengths@rightIR+1)^0,c
   663  0003F4  EC2C  F006         	call	_findStrengths	;wreg free
   664  0003F8                     
   665                           ;main.c: 158:                 move(&motorL, &motorR, 0b10);
   666  0003F8  0EF3               	movlw	low main@motorL
   667  0003FA  6E27               	movwf	move@mL^0,c
   668  0003FC  0E00               	movlw	high main@motorL
   669  0003FE  6E28               	movwf	(move@mL+1)^0,c
   670  000400  0EEA               	movlw	low main@motorR
   671  000402  6E29               	movwf	move@mR^0,c
   672  000404  0E00               	movlw	high main@motorR
   673  000406  6E2A               	movwf	(move@mR+1)^0,c
   674  000408  0E02               	movlw	2
   675  00040A  6E2B               	movwf	move@dir^0,c
   676  00040C  EC04  F006         	call	_move	;wreg free
   677  000410                     
   678                           ;main.c: 160:                 path[i] = 0b10;
   679  000410  0E60               	movlw	low main@path
   680  000412  0100               	movlb	0	; () banked
   681  000414  25E9               	addwf	main@i& (0+255),w,b
   682  000416  6ED9               	movwf	fsr2l,c
   683  000418  6ADA               	clrf	fsr2h,c
   684  00041A  0E00               	movlw	high main@path
   685  00041C  22DA               	addwfc	fsr2h,f,c
   686  00041E  0E02               	movlw	2
   687  000420  6EDF               	movwf	indf2,c
   688  000422                     
   689                           ; BSR set to: 0
   690                           ;main.c: 161:                 i += 1;
   691  000422  2BE9               	incf	main@i& (0+255),f,b
   692  000424                     l1689:
   693                           
   694                           ; BSR set to: 0
   695                           ;main.c: 155:             while ((leftIR < 1500 || rightIR < 1500) && robotOn == 1 && IR
      +                          source == 0) {
   696  000424  BFE6               	btfsc	(main@leftIR+1)& (0+255),7,b
   697  000426  EF1E  F002         	goto	u741
   698  00042A  0EDC               	movlw	220
   699  00042C  5DE5               	subwf	main@leftIR& (0+255),w,b
   700  00042E  0E05               	movlw	5
   701  000430  59E6               	subwfb	(main@leftIR+1)& (0+255),w,b
   702  000432  A0D8               	btfss	status,0,c
   703  000434  EF1E  F002         	goto	u741
   704  000438  EF20  F002         	goto	u740
   705  00043C                     u741:
   706  00043C  EF2E  F002         	goto	l1693
   707  000440                     u740:
   708  000440                     
   709                           ; BSR set to: 0
   710  000440  BFE8               	btfsc	(main@rightIR+1)& (0+255),7,b
   711  000442  EF2E  F002         	goto	u750
   712  000446  0EDC               	movlw	220
   713  000448  5DE7               	subwf	main@rightIR& (0+255),w,b
   714  00044A  0E05               	movlw	5
   715  00044C  59E8               	subwfb	(main@rightIR+1)& (0+255),w,b
   716  00044E  B0D8               	btfsc	status,0,c
   717  000450  EF2C  F002         	goto	u751
   718  000454  EF2E  F002         	goto	u750
   719  000458                     u751:
   720  000458  EF3E  F002         	goto	l1697
   721  00045C                     u750:
   722  00045C                     l1693:
   723                           
   724                           ; BSR set to: 0
   725  00045C  05FE               	decf	_robotOn& (0+255),w,b
   726  00045E  A4D8               	btfss	status,2,c
   727  000460  EF34  F002         	goto	u761
   728  000464  EF36  F002         	goto	u760
   729  000468                     u761:
   730  000468  EF3E  F002         	goto	l1697
   731  00046C                     u760:
   732  00046C                     
   733                           ; BSR set to: 0
   734  00046C  51FC               	movf	_IRsource& (0+255),w,b
   735  00046E  B4D8               	btfsc	status,2,c
   736  000470  EF3C  F002         	goto	u771
   737  000474  EF3E  F002         	goto	u770
   738  000478                     u771:
   739  000478  EFF2  F001         	goto	l1681
   740  00047C                     u770:
   741  00047C                     l1697:
   742                           
   743                           ; BSR set to: 0
   744                           ;main.c: 164:             IRsource = 1;
   745  00047C  0E01               	movlw	1
   746  00047E  6FFC               	movwf	_IRsource& (0+255),b
   747  000480                     
   748                           ; BSR set to: 0
   749                           ;main.c: 167:             if (RFIDread == 1) {
   750  000480  05FD               	decf	_RFIDread& (0+255),w,b
   751  000482  A4D8               	btfss	status,2,c
   752  000484  EF46  F002         	goto	u781
   753  000488  EF48  F002         	goto	u780
   754  00048C                     u781:
   755  00048C  EF73  F002         	goto	l1711
   756  000490                     u780:
   757  000490  EF5E  F002         	goto	l1707
   758  000494                     l1703:
   759                           
   760                           ; BSR set to: 0
   761                           ;main.c: 171:                     --i;
   762  000494  07E9               	decf	main@i& (0+255),f,b
   763  000496                     
   764                           ; BSR set to: 0
   765                           ;main.c: 172:                     move(&motorL, &motorR, ~(path[i]));
   766  000496  0EF3               	movlw	low main@motorL
   767  000498  6E27               	movwf	move@mL^0,c
   768  00049A  0E00               	movlw	high main@motorL
   769  00049C  6E28               	movwf	(move@mL+1)^0,c
   770  00049E  0EEA               	movlw	low main@motorR
   771  0004A0  6E29               	movwf	move@mR^0,c
   772  0004A2  0E00               	movlw	high main@motorR
   773  0004A4  6E2A               	movwf	(move@mR+1)^0,c
   774  0004A6  0E60               	movlw	low main@path
   775  0004A8  25E9               	addwf	main@i& (0+255),w,b
   776  0004AA  6ED9               	movwf	fsr2l,c
   777  0004AC  6ADA               	clrf	fsr2h,c
   778  0004AE  0E00               	movlw	high main@path
   779  0004B0  22DA               	addwfc	fsr2h,f,c
   780  0004B2  50DF               	movf	indf2,w,c
   781  0004B4  0AFF               	xorlw	255
   782  0004B6  6E2B               	movwf	move@dir^0,c
   783  0004B8  EC04  F006         	call	_move	;wreg free
   784  0004BC                     l1707:
   785                           
   786                           ;main.c: 169:                 while (i > 0) {
   787  0004BC  0100               	movlb	0	; () banked
   788  0004BE  51E9               	movf	main@i& (0+255),w,b
   789  0004C0  A4D8               	btfss	status,2,c
   790  0004C2  EF65  F002         	goto	u791
   791  0004C6  EF67  F002         	goto	u790
   792  0004CA                     u791:
   793  0004CA  EF4A  F002         	goto	l1703
   794  0004CE                     u790:
   795  0004CE                     
   796                           ; BSR set to: 0
   797                           ;main.c: 176:                 stop(&motorL, &motorR);
   798  0004CE  0EF3               	movlw	low main@motorL
   799  0004D0  6E22               	movwf	stop@mL^0,c
   800  0004D2  0E00               	movlw	high main@motorL
   801  0004D4  6E23               	movwf	(stop@mL+1)^0,c
   802  0004D6  0EEA               	movlw	low main@motorR
   803  0004D8  6E24               	movwf	stop@mR^0,c
   804  0004DA  0E00               	movlw	high main@motorR
   805  0004DC  6E25               	movwf	(stop@mR+1)^0,c
   806  0004DE  ECAC  F005         	call	_stop	;wreg free
   807                           
   808                           ;main.c: 178:             } else {
   809  0004E2  EFDF  F001         	goto	l1677
   810  0004E6                     l1711:
   811                           
   812                           ; BSR set to: 0
   813                           ;main.c: 180:                 move(&motorL, &motorR, 0b00);
   814  0004E6  0EF3               	movlw	low main@motorL
   815  0004E8  6E27               	movwf	move@mL^0,c
   816  0004EA  0E00               	movlw	high main@motorL
   817  0004EC  6E28               	movwf	(move@mL+1)^0,c
   818  0004EE  0EEA               	movlw	low main@motorR
   819  0004F0  6E29               	movwf	move@mR^0,c
   820  0004F2  0E00               	movlw	high main@motorR
   821  0004F4  6E2A               	movwf	(move@mR+1)^0,c
   822  0004F6  0E00               	movlw	0
   823  0004F8  6E2B               	movwf	move@dir^0,c
   824  0004FA  EC04  F006         	call	_move	;wreg free
   825  0004FE                     
   826                           ;main.c: 182:                 path[i] = 0b00;
   827  0004FE  0E60               	movlw	low main@path
   828  000500  0100               	movlb	0	; () banked
   829  000502  25E9               	addwf	main@i& (0+255),w,b
   830  000504  6ED9               	movwf	fsr2l,c
   831  000506  6ADA               	clrf	fsr2h,c
   832  000508  0E00               	movlw	high main@path
   833  00050A  22DA               	addwfc	fsr2h,f,c
   834  00050C  0E00               	movlw	0
   835  00050E  6EDF               	movwf	indf2,c
   836  000510                     
   837                           ; BSR set to: 0
   838                           ;main.c: 183:                 i += 1;
   839  000510  2BE9               	incf	main@i& (0+255),f,b
   840  000512                     
   841                           ; BSR set to: 0
   842                           ;main.c: 185:                 findStrengths(&leftIR, &rightIR);
   843  000512  0EE5               	movlw	low main@leftIR
   844  000514  6E14               	movwf	findStrengths@leftIR^0,c
   845  000516  0E00               	movlw	high main@leftIR
   846  000518  6E15               	movwf	(findStrengths@leftIR+1)^0,c
   847  00051A  0EE7               	movlw	low main@rightIR
   848  00051C  6E16               	movwf	findStrengths@rightIR^0,c
   849  00051E  0E00               	movlw	high main@rightIR
   850  000520  6E17               	movwf	(findStrengths@rightIR+1)^0,c
   851  000522  EC2C  F006         	call	_findStrengths	;wreg free
   852  000526                     
   853                           ;main.c: 187:                 if (leftIR > (rightIR + buffer)) {
   854  000526  0100               	movlb	0	; () banked
   855  000528  51E2               	movf	main@buffer& (0+255),w,b
   856  00052A  25E7               	addwf	main@rightIR& (0+255),w,b
   857  00052C  6E2C               	movwf	??_main^0,c
   858  00052E  51E3               	movf	(main@buffer+1)& (0+255),w,b
   859  000530  21E8               	addwfc	(main@rightIR+1)& (0+255),w,b
   860  000532  6E2D               	movwf	(??_main+1)^0,c
   861  000534  51E5               	movf	main@leftIR& (0+255),w,b
   862  000536  5C2C               	subwf	??_main^0,w,c
   863  000538  502D               	movf	(??_main+1)^0,w,c
   864  00053A  0A80               	xorlw	128
   865  00053C  6E2E               	movwf	(??_main+2)^0,c
   866  00053E  51E6               	movf	(main@leftIR+1)& (0+255),w,b
   867  000540  0A80               	xorlw	128
   868  000542  582E               	subwfb	(??_main+2)^0,w,c
   869  000544  B0D8               	btfsc	status,0,c
   870  000546  EFA7  F002         	goto	u801
   871  00054A  EFA9  F002         	goto	u800
   872  00054E                     u801:
   873  00054E  EFF9  F002         	goto	l1741
   874  000552                     u800:
   875  000552                     l1721:
   876                           
   877                           ; BSR set to: 0
   878                           ;main.c: 189:                     c += 1;
   879  000552  2BE4               	incf	main@c& (0+255),f,b
   880                           
   881                           ;main.c: 191:                     while (leftIR > (rightIR + buffer) && c < 4) {
   882  000554  EFD8  F002         	goto	l1735
   883  000558                     l1723:
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 195:                         findStrengths(&leftIR, &rightIR);
   887  000558  0EE5               	movlw	low main@leftIR
   888  00055A  6E14               	movwf	findStrengths@leftIR^0,c
   889  00055C  0E00               	movlw	high main@leftIR
   890  00055E  6E15               	movwf	(findStrengths@leftIR+1)^0,c
   891  000560  0EE7               	movlw	low main@rightIR
   892  000562  6E16               	movwf	findStrengths@rightIR^0,c
   893  000564  0E00               	movlw	high main@rightIR
   894  000566  6E17               	movwf	(findStrengths@rightIR+1)^0,c
   895  000568  EC2C  F006         	call	_findStrengths	;wreg free
   896  00056C                     
   897                           ;main.c: 197:                         if (c == 3) {
   898  00056C  0E03               	movlw	3
   899  00056E  0100               	movlb	0	; () banked
   900  000570  19E4               	xorwf	main@c& (0+255),w,b
   901  000572  A4D8               	btfss	status,2,c
   902  000574  EFBE  F002         	goto	u811
   903  000578  EFC0  F002         	goto	u810
   904  00057C                     u811:
   905  00057C  EFA9  F002         	goto	l1721
   906  000580                     u810:
   907  000580                     
   908                           ; BSR set to: 0
   909                           ;main.c: 199:                             move(&motorL, &motorR, 0b10);
   910  000580  0EF3               	movlw	low main@motorL
   911  000582  6E27               	movwf	move@mL^0,c
   912  000584  0E00               	movlw	high main@motorL
   913  000586  6E28               	movwf	(move@mL+1)^0,c
   914  000588  0EEA               	movlw	low main@motorR
   915  00058A  6E29               	movwf	move@mR^0,c
   916  00058C  0E00               	movlw	high main@motorR
   917  00058E  6E2A               	movwf	(move@mR+1)^0,c
   918  000590  0E02               	movlw	2
   919  000592  6E2B               	movwf	move@dir^0,c
   920  000594  EC04  F006         	call	_move	;wreg free
   921  000598                     
   922                           ;main.c: 201:                             path[i] = 0b10;
   923  000598  0E60               	movlw	low main@path
   924  00059A  0100               	movlb	0	; () banked
   925  00059C  25E9               	addwf	main@i& (0+255),w,b
   926  00059E  6ED9               	movwf	fsr2l,c
   927  0005A0  6ADA               	clrf	fsr2h,c
   928  0005A2  0E00               	movlw	high main@path
   929  0005A4  22DA               	addwfc	fsr2h,f,c
   930  0005A6  0E02               	movlw	2
   931  0005A8  6EDF               	movwf	indf2,c
   932  0005AA                     
   933                           ; BSR set to: 0
   934                           ;main.c: 202:                             i += 1;
   935  0005AA  2BE9               	incf	main@i& (0+255),f,b
   936  0005AC  EFA9  F002         	goto	l1721
   937  0005B0                     l1735:
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 191:                     while (leftIR > (rightIR + buffer) && c < 4) {
   941  0005B0  51E2               	movf	main@buffer& (0+255),w,b
   942  0005B2  25E7               	addwf	main@rightIR& (0+255),w,b
   943  0005B4  6E2C               	movwf	??_main^0,c
   944  0005B6  51E3               	movf	(main@buffer+1)& (0+255),w,b
   945  0005B8  21E8               	addwfc	(main@rightIR+1)& (0+255),w,b
   946  0005BA  6E2D               	movwf	(??_main+1)^0,c
   947  0005BC  51E5               	movf	main@leftIR& (0+255),w,b
   948  0005BE  5C2C               	subwf	??_main^0,w,c
   949  0005C0  502D               	movf	(??_main+1)^0,w,c
   950  0005C2  0A80               	xorlw	128
   951  0005C4  6E2E               	movwf	(??_main+2)^0,c
   952  0005C6  51E6               	movf	(main@leftIR+1)& (0+255),w,b
   953  0005C8  0A80               	xorlw	128
   954  0005CA  582E               	subwfb	(??_main+2)^0,w,c
   955  0005CC  B0D8               	btfsc	status,0,c
   956  0005CE  EFEB  F002         	goto	u821
   957  0005D2  EFED  F002         	goto	u820
   958  0005D6                     u821:
   959  0005D6  EFF5  F002         	goto	l1739
   960  0005DA                     u820:
   961  0005DA                     
   962                           ; BSR set to: 0
   963  0005DA  0E03               	movlw	3
   964  0005DC  65E4               	cpfsgt	main@c& (0+255),b
   965  0005DE  EFF3  F002         	goto	u831
   966  0005E2  EFF5  F002         	goto	u830
   967  0005E6                     u831:
   968  0005E6  EFAC  F002         	goto	l1723
   969  0005EA                     u830:
   970  0005EA                     l1739:
   971                           
   972                           ; BSR set to: 0
   973                           ;main.c: 209:                     c = 0;
   974  0005EA  0E00               	movlw	0
   975  0005EC  6FE4               	movwf	main@c& (0+255),b
   976                           
   977                           ;main.c: 211:                 } else if ((leftIR + buffer) < rightIR) {
   978  0005EE  EFDF  F001         	goto	l1677
   979  0005F2                     l1741:
   980                           
   981                           ; BSR set to: 0
   982  0005F2  51E2               	movf	main@buffer& (0+255),w,b
   983  0005F4  25E5               	addwf	main@leftIR& (0+255),w,b
   984  0005F6  6E2C               	movwf	??_main^0,c
   985  0005F8  51E3               	movf	(main@buffer+1)& (0+255),w,b
   986  0005FA  21E6               	addwfc	(main@leftIR+1)& (0+255),w,b
   987  0005FC  6E2D               	movwf	(??_main+1)^0,c
   988  0005FE  51E7               	movf	main@rightIR& (0+255),w,b
   989  000600  5C2C               	subwf	??_main^0,w,c
   990  000602  502D               	movf	(??_main+1)^0,w,c
   991  000604  0A80               	xorlw	128
   992  000606  6E2E               	movwf	(??_main+2)^0,c
   993  000608  51E8               	movf	(main@rightIR+1)& (0+255),w,b
   994  00060A  0A80               	xorlw	128
   995  00060C  582E               	subwfb	(??_main+2)^0,w,c
   996  00060E  B0D8               	btfsc	status,0,c
   997  000610  EF0C  F003         	goto	u841
   998  000614  EF0E  F003         	goto	u840
   999  000618                     u841:
  1000  000618  EF87  F003         	goto	l99
  1001  00061C                     u840:
  1002  00061C                     l1743:
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;main.c: 213:                     c += 1;
  1006  00061C  2BE4               	incf	main@c& (0+255),f,b
  1007                           
  1008                           ;main.c: 215:                     while ((leftIR + buffer) < rightIR && c < 4) {
  1009  00061E  EF3D  F003         	goto	l1757
  1010  000622                     l1745:
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;main.c: 217:                         findStrengths(&leftIR, &rightIR);
  1014  000622  0EE5               	movlw	low main@leftIR
  1015  000624  6E14               	movwf	findStrengths@leftIR^0,c
  1016  000626  0E00               	movlw	high main@leftIR
  1017  000628  6E15               	movwf	(findStrengths@leftIR+1)^0,c
  1018  00062A  0EE7               	movlw	low main@rightIR
  1019  00062C  6E16               	movwf	findStrengths@rightIR^0,c
  1020  00062E  0E00               	movlw	high main@rightIR
  1021  000630  6E17               	movwf	(findStrengths@rightIR+1)^0,c
  1022  000632  EC2C  F006         	call	_findStrengths	;wreg free
  1023  000636                     
  1024                           ;main.c: 219:                         if (c == 3) {
  1025  000636  0E03               	movlw	3
  1026  000638  0100               	movlb	0	; () banked
  1027  00063A  19E4               	xorwf	main@c& (0+255),w,b
  1028  00063C  A4D8               	btfss	status,2,c
  1029  00063E  EF23  F003         	goto	u851
  1030  000642  EF25  F003         	goto	u850
  1031  000646                     u851:
  1032  000646  EF0E  F003         	goto	l1743
  1033  00064A                     u850:
  1034  00064A                     
  1035                           ; BSR set to: 0
  1036                           ;main.c: 221:                             move(&motorL, &motorR, 0b01);
  1037  00064A  0EF3               	movlw	low main@motorL
  1038  00064C  6E27               	movwf	move@mL^0,c
  1039  00064E  0E00               	movlw	high main@motorL
  1040  000650  6E28               	movwf	(move@mL+1)^0,c
  1041  000652  0EEA               	movlw	low main@motorR
  1042  000654  6E29               	movwf	move@mR^0,c
  1043  000656  0E00               	movlw	high main@motorR
  1044  000658  6E2A               	movwf	(move@mR+1)^0,c
  1045  00065A  0E01               	movlw	1
  1046  00065C  6E2B               	movwf	move@dir^0,c
  1047  00065E  EC04  F006         	call	_move	;wreg free
  1048  000662                     
  1049                           ;main.c: 223:                             path[i] = 0b01;
  1050  000662  0E60               	movlw	low main@path
  1051  000664  0100               	movlb	0	; () banked
  1052  000666  25E9               	addwf	main@i& (0+255),w,b
  1053  000668  6ED9               	movwf	fsr2l,c
  1054  00066A  6ADA               	clrf	fsr2h,c
  1055  00066C  0E00               	movlw	high main@path
  1056  00066E  22DA               	addwfc	fsr2h,f,c
  1057  000670  0E01               	movlw	1
  1058  000672  6EDF               	movwf	indf2,c
  1059  000674                     
  1060                           ; BSR set to: 0
  1061                           ;main.c: 224:                             i += 1;
  1062  000674  2BE9               	incf	main@i& (0+255),f,b
  1063  000676  EF0E  F003         	goto	l1743
  1064  00067A                     l1757:
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;main.c: 215:                     while ((leftIR + buffer) < rightIR && c < 4) {
  1068  00067A  51E2               	movf	main@buffer& (0+255),w,b
  1069  00067C  25E5               	addwf	main@leftIR& (0+255),w,b
  1070  00067E  6E2C               	movwf	??_main^0,c
  1071  000680  51E3               	movf	(main@buffer+1)& (0+255),w,b
  1072  000682  21E6               	addwfc	(main@leftIR+1)& (0+255),w,b
  1073  000684  6E2D               	movwf	(??_main+1)^0,c
  1074  000686  51E7               	movf	main@rightIR& (0+255),w,b
  1075  000688  5C2C               	subwf	??_main^0,w,c
  1076  00068A  502D               	movf	(??_main+1)^0,w,c
  1077  00068C  0A80               	xorlw	128
  1078  00068E  6E2E               	movwf	(??_main+2)^0,c
  1079  000690  51E8               	movf	(main@rightIR+1)& (0+255),w,b
  1080  000692  0A80               	xorlw	128
  1081  000694  582E               	subwfb	(??_main+2)^0,w,c
  1082  000696  B0D8               	btfsc	status,0,c
  1083  000698  EF50  F003         	goto	u861
  1084  00069C  EF52  F003         	goto	u860
  1085  0006A0                     u861:
  1086  0006A0  EFF5  F002         	goto	l1739
  1087  0006A4                     u860:
  1088  0006A4                     
  1089                           ; BSR set to: 0
  1090  0006A4  0E03               	movlw	3
  1091  0006A6  65E4               	cpfsgt	main@c& (0+255),b
  1092  0006A8  EF58  F003         	goto	u871
  1093  0006AC  EF5A  F003         	goto	u870
  1094  0006B0                     u871:
  1095  0006B0  EF11  F003         	goto	l1745
  1096  0006B4                     u870:
  1097  0006B4  EFF5  F002         	goto	l1739
  1098  0006B8                     l1763:
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;main.c: 243:             if (reset == 1) {
  1102  0006B8  05FF               	decf	_reset& (0+255),w,b
  1103  0006BA  A4D8               	btfss	status,2,c
  1104  0006BC  EF62  F003         	goto	u881
  1105  0006C0  EF64  F003         	goto	u880
  1106  0006C4                     u881:
  1107  0006C4  EFDF  F001         	goto	l1677
  1108  0006C8                     u880:
  1109  0006C8                     
  1110                           ; BSR set to: 0
  1111                           ;main.c: 245:                 stop(&motorL, &motorR);
  1112  0006C8  0EF3               	movlw	low main@motorL
  1113  0006CA  6E22               	movwf	stop@mL^0,c
  1114  0006CC  0E00               	movlw	high main@motorL
  1115  0006CE  6E23               	movwf	(stop@mL+1)^0,c
  1116  0006D0  0EEA               	movlw	low main@motorR
  1117  0006D2  6E24               	movwf	stop@mR^0,c
  1118  0006D4  0E00               	movlw	high main@motorR
  1119  0006D6  6E25               	movwf	(stop@mR+1)^0,c
  1120  0006D8  ECAC  F005         	call	_stop	;wreg free
  1121  0006DC                     
  1122                           ;main.c: 246:                 reset = 0;
  1123  0006DC  0E00               	movlw	0
  1124  0006DE  0100               	movlb	0	; () banked
  1125  0006E0  6FFF               	movwf	_reset& (0+255),b
  1126  0006E2                     
  1127                           ; BSR set to: 0
  1128                           ;main.c: 247:                 LATDbits.LATD2 = 0;
  1129  0006E2  948C               	bcf	140,2,c	;volatile
  1130                           
  1131                           ;main.c: 250:                 while (i > 0) {
  1132  0006E4  EF7D  F003         	goto	l1775
  1133  0006E8                     l1771:
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 251:                     --i;
  1137  0006E8  07E9               	decf	main@i& (0+255),f,b
  1138  0006EA                     
  1139                           ; BSR set to: 0
  1140                           ;main.c: 253:                     path[i] = 0;
  1141  0006EA  0E60               	movlw	low main@path
  1142  0006EC  25E9               	addwf	main@i& (0+255),w,b
  1143  0006EE  6ED9               	movwf	fsr2l,c
  1144  0006F0  6ADA               	clrf	fsr2h,c
  1145  0006F2  0E00               	movlw	high main@path
  1146  0006F4  22DA               	addwfc	fsr2h,f,c
  1147  0006F6  0E00               	movlw	0
  1148  0006F8  6EDF               	movwf	indf2,c
  1149  0006FA                     l1775:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 250:                 while (i > 0) {
  1153  0006FA  51E9               	movf	main@i& (0+255),w,b
  1154  0006FC  A4D8               	btfss	status,2,c
  1155  0006FE  EF83  F003         	goto	u891
  1156  000702  EF85  F003         	goto	u890
  1157  000706                     u891:
  1158  000706  EF74  F003         	goto	l1771
  1159  00070A                     u890:
  1160  00070A  EFDF  F001         	goto	l1677
  1161  00070E                     l99:
  1162                           
  1163                           ; BSR set to: 0
  1164  00070E  EFDF  F001         	goto	l1677
  1165  000712  EF3B  F000         	goto	start
  1166  000716                     __end_of_main:
  1167                           	opt callstack 0
  1168                           
  1169 ;; *************** function _move *****************
  1170 ;; Defined at:
  1171 ;;		line 142 in file "PWM.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;  mL              2   38[COMRAM] PTR struct DC_motor
  1174 ;;		 -> main@motorL(9), 
  1175 ;;  mR              2   40[COMRAM] PTR struct DC_motor
  1176 ;;		 -> main@motorR(9), 
  1177 ;;  dir             1   42[COMRAM] unsigned char 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;		None
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1189 ;;      Params:         5       0       0       0
  1190 ;;      Locals:         0       0       0       0
  1191 ;;      Temps:          0       0       0       0
  1192 ;;      Totals:         5       0       0       0
  1193 ;;Total ram usage:        5 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:   10
  1196 ;; This function calls:
  1197 ;;		_setMotorsFullSpeed
  1198 ;;		_stop
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text1
  1205  000C08                     __ptext1:
  1206                           	opt callstack 0
  1207  000C08                     _move:
  1208                           	opt callstack 20
  1209  000C08  EE20 F001          	lfsr	2,1
  1210  000C0C  5027               	movf	move@mL^0,w,c
  1211  000C0E  26D9               	addwf	fsr2l,f,c
  1212  000C10  5028               	movf	(move@mL+1)^0,w,c
  1213  000C12  22DA               	addwfc	fsr2h,f,c
  1214  000C14  90D8               	bcf	status,0,c
  1215  000C16  302B               	rrcf	move@dir^0,w,c
  1216  000C18  0B01               	andlw	1
  1217  000C1A  6EDF               	movwf	indf2,c
  1218  000C1C  EE20 F001          	lfsr	2,1
  1219  000C20  5029               	movf	move@mR^0,w,c
  1220  000C22  26D9               	addwf	fsr2l,f,c
  1221  000C24  502A               	movf	(move@mR+1)^0,w,c
  1222  000C26  22DA               	addwfc	fsr2h,f,c
  1223  000C28  502B               	movf	move@dir^0,w,c
  1224  000C2A  0B01               	andlw	1
  1225  000C2C  6EDF               	movwf	indf2,c
  1226  000C2E  C027  F022         	movff	move@mL,setMotorsFullSpeed@mL
  1227  000C32  C028  F023         	movff	move@mL+1,setMotorsFullSpeed@mL+1
  1228  000C36  C029  F024         	movff	move@mR,setMotorsFullSpeed@mR
  1229  000C3A  C02A  F025         	movff	move@mR+1,setMotorsFullSpeed@mR+1
  1230  000C3E  ECD8  F005         	call	_setMotorsFullSpeed	;wreg free
  1231  000C42  C027  F022         	movff	move@mL,stop@mL
  1232  000C46  C028  F023         	movff	move@mL+1,stop@mL+1
  1233  000C4A  C029  F024         	movff	move@mR,stop@mR
  1234  000C4E  C02A  F025         	movff	move@mR+1,stop@mR+1
  1235  000C52  ECAC  F005         	call	_stop	;wreg free
  1236  000C56  0012               	return		;funcret
  1237  000C58                     __end_of_move:
  1238                           	opt callstack 0
  1239                           
  1240 ;; *************** function _stop *****************
  1241 ;; Defined at:
  1242 ;;		line 123 in file "PWM.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1245 ;;		 -> main@motorL(9), 
  1246 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1247 ;;		 -> main@motorR(9), 
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;		None
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1259 ;;      Params:         4       0       0       0
  1260 ;;      Locals:         0       0       0       0
  1261 ;;      Temps:          1       0       0       0
  1262 ;;      Totals:         5       0       0       0
  1263 ;;Total ram usage:        5 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    9
  1266 ;; This function calls:
  1267 ;;		_setMotorPWM
  1268 ;; This function is called by:
  1269 ;;		_main
  1270 ;;		_move
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text2
  1275  000B58                     __ptext2:
  1276                           	opt callstack 0
  1277  000B58                     _stop:
  1278                           	opt callstack 21
  1279  000B58  EFCB  F005         	goto	l1467
  1280  000B5C                     l1459:
  1281  000B5C  C022  F01A         	movff	stop@mL,setMotorPWM@m
  1282  000B60  C023  F01B         	movff	stop@mL+1,setMotorPWM@m+1
  1283  000B64  EC8B  F003         	call	_setMotorPWM	;wreg free
  1284  000B68  C024  F01A         	movff	stop@mR,setMotorPWM@m
  1285  000B6C  C025  F01B         	movff	stop@mR+1,setMotorPWM@m+1
  1286  000B70  EC8B  F003         	call	_setMotorPWM	;wreg free
  1287  000B74  C024  FFD9         	movff	stop@mR,fsr2l
  1288  000B78  C025  FFDA         	movff	stop@mR+1,fsr2h
  1289  000B7C  06DF               	decf	indf2,f,c
  1290  000B7E  0E0D               	movlw	13
  1291  000B80  6E26               	movwf	??_stop^0,c
  1292  000B82  0EFC               	movlw	252
  1293  000B84                     u977:
  1294  000B84  2EE8               	decfsz	wreg,f,c
  1295  000B86  D7FE               	bra	u977
  1296  000B88  2E26               	decfsz	??_stop^0,f,c
  1297  000B8A  D7FC               	bra	u977
  1298  000B8C  C022  FFD9         	movff	stop@mL,fsr2l
  1299  000B90  C023  FFDA         	movff	stop@mL+1,fsr2h
  1300  000B94  06DF               	decf	indf2,f,c
  1301  000B96                     l1467:
  1302  000B96  C022  FFD9         	movff	stop@mL,fsr2l
  1303  000B9A  C023  FFDA         	movff	stop@mL+1,fsr2h
  1304  000B9E  50DF               	movf	indf2,w,c
  1305  000BA0  A4D8               	btfss	status,2,c
  1306  000BA2  EFD5  F005         	goto	u581
  1307  000BA6  EFD7  F005         	goto	u580
  1308  000BAA                     u581:
  1309  000BAA  EFAE  F005         	goto	l1459
  1310  000BAE                     u580:
  1311  000BAE  0012               	return		;funcret
  1312  000BB0                     __end_of_stop:
  1313                           	opt callstack 0
  1314                           
  1315 ;; *************** function _setMotorsFullSpeed *****************
  1316 ;; Defined at:
  1317 ;;		line 105 in file "PWM.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1320 ;;		 -> main@motorL(9), 
  1321 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1322 ;;		 -> main@motorR(9), 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1334 ;;      Params:         4       0       0       0
  1335 ;;      Locals:         0       0       0       0
  1336 ;;      Temps:          1       0       0       0
  1337 ;;      Totals:         5       0       0       0
  1338 ;;Total ram usage:        5 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    9
  1341 ;; This function calls:
  1342 ;;		_setMotorPWM
  1343 ;; This function is called by:
  1344 ;;		_move
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text3
  1349  000BB0                     __ptext3:
  1350                           	opt callstack 0
  1351  000BB0                     _setMotorsFullSpeed:
  1352                           	opt callstack 20
  1353  000BB0  EFF7  F005         	goto	l1485
  1354  000BB4                     l1477:
  1355                           
  1356                           ;PWM.c: 110:         setMotorPWM(mR);
  1357  000BB4  C022  F01A         	movff	setMotorsFullSpeed@mL,setMotorPWM@m
  1358  000BB8  C023  F01B         	movff	setMotorsFullSpeed@mL+1,setMotorPWM@m+1
  1359  000BBC  EC8B  F003         	call	_setMotorPWM	;wreg free
  1360                           
  1361                           ;PWM.c: 111: 
  1362  000BC0  C024  F01A         	movff	setMotorsFullSpeed@mR,setMotorPWM@m
  1363  000BC4  C025  F01B         	movff	setMotorsFullSpeed@mR+1,setMotorPWM@m+1
  1364  000BC8  EC8B  F003         	call	_setMotorPWM	;wreg free
  1365  000BCC                     
  1366                           ;PWM.c: 113:        _delay((unsigned long)((5)*(8000000/4000.0)));
  1367  000BCC  C024  FFD9         	movff	setMotorsFullSpeed@mR,fsr2l
  1368  000BD0  C025  FFDA         	movff	setMotorsFullSpeed@mR+1,fsr2h
  1369  000BD4  2ADF               	incf	indf2,f,c
  1370  000BD6                     
  1371                           ;PWM.c: 114: 
  1372  000BD6  0E0D               	movlw	13
  1373  000BD8  6E26               	movwf	??_setMotorsFullSpeed^0,c
  1374  000BDA  0EFC               	movlw	252
  1375  000BDC                     u987:
  1376  000BDC  2EE8               	decfsz	wreg,f,c
  1377  000BDE  D7FE               	bra	u987
  1378  000BE0  2E26               	decfsz	??_setMotorsFullSpeed^0,f,c
  1379  000BE2  D7FC               	bra	u987
  1380  000BE4                     
  1381                           ;PWM.c: 116:         }
  1382  000BE4  C022  FFD9         	movff	setMotorsFullSpeed@mL,fsr2l
  1383  000BE8  C023  FFDA         	movff	setMotorsFullSpeed@mL+1,fsr2h
  1384  000BEC  2ADF               	incf	indf2,f,c
  1385  000BEE                     l1485:
  1386  000BEE  C022  FFD9         	movff	setMotorsFullSpeed@mL,fsr2l
  1387  000BF2  C023  FFDA         	movff	setMotorsFullSpeed@mL+1,fsr2h
  1388  000BF6  0E64               	movlw	100
  1389  000BF8  64DF               	cpfsgt	indf2,c
  1390  000BFA  EF01  F006         	goto	u601
  1391  000BFE  EF03  F006         	goto	u600
  1392  000C02                     u601:
  1393  000C02  EFDA  F005         	goto	l1477
  1394  000C06                     u600:
  1395  000C06  0012               	return		;funcret
  1396  000C08                     __end_of_setMotorsFullSpeed:
  1397                           	opt callstack 0
  1398                           
  1399 ;; *************** function _setMotorPWM *****************
  1400 ;; Defined at:
  1401 ;;		line 74 in file "PWM.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  m               2   25[COMRAM] PTR struct DC_motor
  1404 ;;		 -> main@motorL(9), main@motorR(9), 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  PWMduty         2   31[COMRAM] int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1416 ;;      Params:         2       0       0       0
  1417 ;;      Locals:         2       0       0       0
  1418 ;;      Temps:          4       0       0       0
  1419 ;;      Totals:         8       0       0       0
  1420 ;;Total ram usage:        8 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    8
  1423 ;; This function calls:
  1424 ;;		___wmul
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;;		_setMotorsFullSpeed
  1428 ;;		_stop
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text4
  1433  000716                     __ptext4:
  1434                           	opt callstack 0
  1435  000716                     _setMotorPWM:
  1436                           	opt callstack 21
  1437  000716                     
  1438                           ;PWM.c: 77:     }
  1439  000716  C01A  FFD9         	movff	setMotorPWM@m,fsr2l
  1440  00071A  C01B  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1441  00071E  50DF               	movf	indf2,w,c
  1442  000720  6E1C               	movwf	??_setMotorPWM^0,c
  1443  000722  501C               	movf	??_setMotorPWM^0,w,c
  1444  000724  6E14               	movwf	___wmul@multiplier^0,c
  1445  000726  6A15               	clrf	(___wmul@multiplier+1)^0,c
  1446  000728  EE20 F007          	lfsr	2,7
  1447  00072C  501A               	movf	setMotorPWM@m^0,w,c
  1448  00072E  26D9               	addwf	fsr2l,f,c
  1449  000730  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1450  000732  22DA               	addwfc	fsr2h,f,c
  1451  000734  CFDE F016          	movff	postinc2,___wmul@multiplicand
  1452  000738  CFDD F017          	movff	postdec2,___wmul@multiplicand+1
  1453  00073C  EC2F  F007         	call	___wmul	;wreg free
  1454  000740  C014  F020         	movff	?___wmul,setMotorPWM@PWMduty
  1455  000744  C015  F021         	movff	?___wmul+1,setMotorPWM@PWMduty+1
  1456  000748                     
  1457                           ;PWM.c: 79: }
  1458  000748  EE20 F001          	lfsr	2,1
  1459  00074C  501A               	movf	setMotorPWM@m^0,w,c
  1460  00074E  26D9               	addwf	fsr2l,f,c
  1461  000750  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1462  000752  22DA               	addwfc	fsr2h,f,c
  1463  000754  50DF               	movf	indf2,w,c
  1464  000756  B4D8               	btfsc	status,2,c
  1465  000758  EFB0  F003         	goto	u491
  1466  00075C  EFB2  F003         	goto	u490
  1467  000760                     u491:
  1468  000760  EFE0  F003         	goto	l1425
  1469  000764                     u490:
  1470  000764                     
  1471                           ;PWM.c: 81: 
  1472  000764  C020  F01C         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  1473  000768  C021  F01D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  1474  00076C  0E09               	movlw	9
  1475  00076E  6E1E               	movwf	(??_setMotorPWM+2)^0,c
  1476  000770                     u505:
  1477  000770  341D               	rlcf	(??_setMotorPWM+1)^0,w,c
  1478  000772  321D               	rrcf	(??_setMotorPWM+1)^0,f,c
  1479  000774  321C               	rrcf	??_setMotorPWM^0,f,c
  1480  000776  2E1E               	decfsz	(??_setMotorPWM+2)^0,f,c
  1481  000778  EFB8  F003         	goto	u505
  1482  00077C  5020               	movf	setMotorPWM@PWMduty^0,w,c
  1483  00077E  261C               	addwf	??_setMotorPWM^0,f,c
  1484  000780  5021               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1485  000782  221D               	addwfc	(??_setMotorPWM+1)^0,f,c
  1486  000784  0E07               	movlw	7
  1487  000786  6E1F               	movwf	(??_setMotorPWM+3)^0,c
  1488  000788                     u515:
  1489  000788  341D               	rlcf	(??_setMotorPWM+1)^0,w,c
  1490  00078A  321D               	rrcf	(??_setMotorPWM+1)^0,f,c
  1491  00078C  321C               	rrcf	??_setMotorPWM^0,f,c
  1492  00078E  2E1F               	decfsz	(??_setMotorPWM+3)^0,f,c
  1493  000790  EFC4  F003         	goto	u515
  1494  000794  C01C  F020         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1495  000798  C01D  F021         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1496  00079C                     
  1497                           ;PWM.c: 82: 
  1498  00079C  EE20 F007          	lfsr	2,7
  1499  0007A0  501A               	movf	setMotorPWM@m^0,w,c
  1500  0007A2  26D9               	addwf	fsr2l,f,c
  1501  0007A4  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1502  0007A6  22DA               	addwfc	fsr2h,f,c
  1503  0007A8  CFDE F01C          	movff	postinc2,??_setMotorPWM
  1504  0007AC  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  1505  0007B0  5020               	movf	setMotorPWM@PWMduty^0,w,c
  1506  0007B2  5C1C               	subwf	??_setMotorPWM^0,w,c
  1507  0007B4  6E20               	movwf	setMotorPWM@PWMduty^0,c
  1508  0007B6  5021               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1509  0007B8  581D               	subwfb	(??_setMotorPWM+1)^0,w,c
  1510  0007BA  6E21               	movwf	(setMotorPWM@PWMduty+1)^0,c
  1511                           
  1512                           ;PWM.c: 83: 
  1513  0007BC  EFFC  F003         	goto	l1427
  1514  0007C0                     l1425:
  1515                           
  1516                           ;PWM.c: 85: void setMotorsFullSpeed(struct DC_motor *mL, struct DC_motor *mR) {
  1517  0007C0  C020  F01C         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  1518  0007C4  C021  F01D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  1519  0007C8  0E09               	movlw	9
  1520  0007CA  6E1E               	movwf	(??_setMotorPWM+2)^0,c
  1521  0007CC                     u525:
  1522  0007CC  341D               	rlcf	(??_setMotorPWM+1)^0,w,c
  1523  0007CE  321D               	rrcf	(??_setMotorPWM+1)^0,f,c
  1524  0007D0  321C               	rrcf	??_setMotorPWM^0,f,c
  1525  0007D2  2E1E               	decfsz	(??_setMotorPWM+2)^0,f,c
  1526  0007D4  EFE6  F003         	goto	u525
  1527  0007D8  5020               	movf	setMotorPWM@PWMduty^0,w,c
  1528  0007DA  261C               	addwf	??_setMotorPWM^0,f,c
  1529  0007DC  5021               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1530  0007DE  221D               	addwfc	(??_setMotorPWM+1)^0,f,c
  1531  0007E0  0E07               	movlw	7
  1532  0007E2  6E1F               	movwf	(??_setMotorPWM+3)^0,c
  1533  0007E4                     u535:
  1534  0007E4  341D               	rlcf	(??_setMotorPWM+1)^0,w,c
  1535  0007E6  321D               	rrcf	(??_setMotorPWM+1)^0,f,c
  1536  0007E8  321C               	rrcf	??_setMotorPWM^0,f,c
  1537  0007EA  2E1F               	decfsz	(??_setMotorPWM+3)^0,f,c
  1538  0007EC  EFF2  F003         	goto	u535
  1539  0007F0  C01C  F020         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1540  0007F4  C01D  F021         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1541  0007F8                     l1427:
  1542                           
  1543                           ;PWM.c: 88:     for (mL->power; (mL->power) <= 100;(mL->power)++) {
  1544  0007F8  C020  F01C         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  1545  0007FC  C021  F01D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  1546  000800  90D8               	bcf	status,0,c
  1547  000802  361C               	rlcf	??_setMotorPWM^0,f,c
  1548  000804  361D               	rlcf	(??_setMotorPWM+1)^0,f,c
  1549  000806  90D8               	bcf	status,0,c
  1550  000808  361C               	rlcf	??_setMotorPWM^0,f,c
  1551  00080A  361D               	rlcf	(??_setMotorPWM+1)^0,f,c
  1552  00080C  C01C  F020         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1553  000810  C01D  F021         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1554  000814                     
  1555                           ;PWM.c: 89: 
  1556  000814  EE20 F002          	lfsr	2,2
  1557  000818  501A               	movf	setMotorPWM@m^0,w,c
  1558  00081A  26D9               	addwf	fsr2l,f,c
  1559  00081C  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1560  00081E  22DA               	addwfc	fsr2h,f,c
  1561  000820  CFDE F01C          	movff	postinc2,??_setMotorPWM
  1562  000824  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  1563  000828  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  1564  00082C  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1565  000830  C020  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1566  000834                     
  1567                           ;PWM.c: 90:         setMotorPWM(mL);
  1568  000834  EE20 F004          	lfsr	2,4
  1569  000838  501A               	movf	setMotorPWM@m^0,w,c
  1570  00083A  26D9               	addwf	fsr2l,f,c
  1571  00083C  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1572  00083E  22DA               	addwfc	fsr2h,f,c
  1573  000840  CFDE F01C          	movff	postinc2,??_setMotorPWM
  1574  000844  CFDD F01D          	movff	postdec2,??_setMotorPWM+1
  1575  000848  C01C  FFD9         	movff	??_setMotorPWM,fsr2l
  1576  00084C  C01D  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1577  000850  5021               	movf	(setMotorPWM@PWMduty+1)^0,w,c
  1578  000852  0B3F               	andlw	63
  1579  000854  6EDF               	movwf	indf2,c
  1580  000856                     
  1581                           ;PWM.c: 92: 
  1582  000856  EE20 F001          	lfsr	2,1
  1583  00085A  501A               	movf	setMotorPWM@m^0,w,c
  1584  00085C  26D9               	addwf	fsr2l,f,c
  1585  00085E  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1586  000860  22DA               	addwfc	fsr2h,f,c
  1587  000862  50DF               	movf	indf2,w,c
  1588  000864  B4D8               	btfsc	status,2,c
  1589  000866  EF37  F004         	goto	u541
  1590  00086A  EF39  F004         	goto	u540
  1591  00086E                     u541:
  1592  00086E  EF50  F004         	goto	l1437
  1593  000872                     u540:
  1594  000872                     
  1595                           ;PWM.c: 93:         mR->power += 1;
  1596  000872  EE20 F006          	lfsr	2,6
  1597  000876  501A               	movf	setMotorPWM@m^0,w,c
  1598  000878  26D9               	addwf	fsr2l,f,c
  1599  00087A  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1600  00087C  22DA               	addwfc	fsr2h,f,c
  1601  00087E  50DF               	movf	indf2,w,c
  1602  000880  6E1C               	movwf	??_setMotorPWM^0,c
  1603  000882  0E01               	movlw	1
  1604  000884  6E1D               	movwf	(??_setMotorPWM+1)^0,c
  1605  000886  2A1C               	incf	??_setMotorPWM^0,f,c
  1606  000888  EF48  F004         	goto	u554
  1607  00088C                     u555:
  1608  00088C  90D8               	bcf	status,0,c
  1609  00088E  361D               	rlcf	(??_setMotorPWM+1)^0,f,c
  1610  000890                     u554:
  1611  000890  2E1C               	decfsz	??_setMotorPWM^0,f,c
  1612  000892  EF46  F004         	goto	u555
  1613  000896  501D               	movf	(??_setMotorPWM+1)^0,w,c
  1614  000898  108A               	iorwf	138,w,c	;volatile
  1615  00089A  6E8A               	movwf	138,c	;volatile
  1616                           
  1617                           ;PWM.c: 94:        _delay((unsigned long)((5)*(8000000/4000.0)));
  1618  00089C  EF66  F004         	goto	l192
  1619  0008A0                     l1437:
  1620                           
  1621                           ;PWM.c: 95: 
  1622  0008A0  EE20 F006          	lfsr	2,6
  1623  0008A4  501A               	movf	setMotorPWM@m^0,w,c
  1624  0008A6  26D9               	addwf	fsr2l,f,c
  1625  0008A8  501B               	movf	(setMotorPWM@m+1)^0,w,c
  1626  0008AA  22DA               	addwfc	fsr2h,f,c
  1627  0008AC  50DF               	movf	indf2,w,c
  1628  0008AE  6E1C               	movwf	??_setMotorPWM^0,c
  1629  0008B0  0E01               	movlw	1
  1630  0008B2  6E1D               	movwf	(??_setMotorPWM+1)^0,c
  1631  0008B4  2A1C               	incf	??_setMotorPWM^0,f,c
  1632  0008B6  EF5F  F004         	goto	u564
  1633  0008BA                     u565:
  1634  0008BA  90D8               	bcf	status,0,c
  1635  0008BC  361D               	rlcf	(??_setMotorPWM+1)^0,f,c
  1636  0008BE                     u564:
  1637  0008BE  2E1C               	decfsz	??_setMotorPWM^0,f,c
  1638  0008C0  EF5D  F004         	goto	u565
  1639  0008C4  501D               	movf	(??_setMotorPWM+1)^0,w,c
  1640  0008C6  0AFF               	xorlw	255
  1641  0008C8  148A               	andwf	138,w,c	;volatile
  1642  0008CA  6E8A               	movwf	138,c	;volatile
  1643  0008CC                     l192:
  1644  0008CC  0012               	return		;funcret
  1645  0008CE                     __end_of_setMotorPWM:
  1646                           	opt callstack 0
  1647                           
  1648 ;; *************** function ___wmul *****************
  1649 ;; Defined at:
  1650 ;;		line 15 in file "/Applications/microchip/xc8/v2.10/pic/sources/c99/common/Umul16.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  multiplier      2   19[COMRAM] unsigned int 
  1653 ;;  multiplicand    2   21[COMRAM] unsigned int 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  product         2   23[COMRAM] unsigned int 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  2   19[COMRAM] unsigned int 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0, prodl, prodh
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1665 ;;      Params:         4       0       0       0
  1666 ;;      Locals:         2       0       0       0
  1667 ;;      Temps:          0       0       0       0
  1668 ;;      Totals:         6       0       0       0
  1669 ;;Total ram usage:        6 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    7
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_setMotorPWM
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text5
  1680  000E5E                     __ptext5:
  1681                           	opt callstack 0
  1682  000E5E                     ___wmul:
  1683                           	opt callstack 21
  1684  000E5E  5014               	movf	___wmul@multiplier^0,w,c
  1685  000E60  0216               	mulwf	___wmul@multiplicand^0,c
  1686  000E62  CFF3 F018          	movff	prodl,___wmul@product
  1687  000E66  CFF4 F019          	movff	prodh,___wmul@product+1
  1688  000E6A  5014               	movf	___wmul@multiplier^0,w,c
  1689  000E6C  0217               	mulwf	(___wmul@multiplicand+1)^0,c
  1690  000E6E  50F3               	movf	243,w,c
  1691  000E70  2619               	addwf	(___wmul@product+1)^0,f,c
  1692  000E72  5015               	movf	(___wmul@multiplier+1)^0,w,c
  1693  000E74  0216               	mulwf	___wmul@multiplicand^0,c
  1694  000E76  50F3               	movf	243,w,c
  1695  000E78  2619               	addwf	(___wmul@product+1)^0,f,c
  1696  000E7A  C018  F014         	movff	___wmul@product,?___wmul
  1697  000E7E  C019  F015         	movff	___wmul@product+1,?___wmul+1
  1698  000E82  0012               	return		;funcret
  1699  000E84                     __end_of___wmul:
  1700                           	opt callstack 0
  1701                           
  1702 ;; *************** function _initPWM *****************
  1703 ;; Defined at:
  1704 ;;		line 25 in file "PWM.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1718 ;;      Params:         0       0       0       0
  1719 ;;      Locals:         0       0       0       0
  1720 ;;      Temps:          0       0       0       0
  1721 ;;      Totals:         0       0       0       0
  1722 ;;Total ram usage:        0 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    7
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text6
  1733  000AFE                     __ptext6:
  1734                           	opt callstack 0
  1735  000AFE                     _initPWM:
  1736                           	opt callstack 23
  1737  000AFE                     
  1738                           ;PWM.c: 29: 
  1739  000AFE  908A               	bcf	138,0,c	;volatile
  1740                           
  1741                           ;PWM.c: 30: 
  1742  000B00  9093               	bcf	147,0,c	;volatile
  1743                           
  1744                           ;PWM.c: 32:     PDC0H=0b0;
  1745  000B02  928A               	bcf	138,1,c	;volatile
  1746                           
  1747                           ;PWM.c: 33: 
  1748  000B04  9293               	bcf	147,1,c	;volatile
  1749                           
  1750                           ;PWM.c: 35:     PDC1H=0;
  1751  000B06  948A               	bcf	138,2,c	;volatile
  1752                           
  1753                           ;PWM.c: 36: 
  1754  000B08  9493               	bcf	147,2,c	;volatile
  1755                           
  1756                           ;PWM.c: 38:     PDC2H=0;
  1757  000B0A  968A               	bcf	138,3,c	;volatile
  1758                           
  1759                           ;PWM.c: 39: 
  1760  000B0C  9693               	bcf	147,3,c	;volatile
  1761  000B0E                     
  1762                           ;PWM.c: 41:     PDC3H=0;
  1763  000B0E  0E00               	movlw	0
  1764  000B10  6E7F               	movwf	127,c	;volatile
  1765                           
  1766                           ;PWM.c: 42: 
  1767  000B12  0E80               	movlw	128
  1768  000B14  6E7E               	movwf	126,c	;volatile
  1769                           
  1770                           ;PWM.c: 44:     PDC0H=0b1;
  1771  000B16  0E6F               	movlw	111
  1772  000B18  6E6F               	movwf	111,c	;volatile
  1773                           
  1774                           ;PWM.c: 45:     PDC1L=0b10001111;
  1775  000B1A  0E00               	movlw	0
  1776  000B1C  6E6E               	movwf	110,c	;volatile
  1777                           
  1778                           ;PWM.c: 47: 
  1779  000B1E  0EC7               	movlw	199
  1780  000B20  6E7B               	movwf	123,c	;volatile
  1781                           
  1782                           ;PWM.c: 48: };
  1783  000B22  0E00               	movlw	0
  1784  000B24  6E7A               	movwf	122,c	;volatile
  1785                           
  1786                           ;PWM.c: 51: 
  1787  000B26  0E00               	movlw	0
  1788  000B28  6E79               	movwf	121,c	;volatile
  1789                           
  1790                           ;PWM.c: 52: 
  1791  000B2A  0E00               	movlw	0
  1792  000B2C  6E78               	movwf	120,c	;volatile
  1793                           
  1794                           ;PWM.c: 54: void setMotorPWM(struct DC_motor *m){
  1795  000B2E  0E00               	movlw	0
  1796  000B30  6E77               	movwf	119,c	;volatile
  1797                           
  1798                           ;PWM.c: 55: 
  1799  000B32  0E00               	movlw	0
  1800  000B34  6E76               	movwf	118,c	;volatile
  1801                           
  1802                           ;PWM.c: 57:     int PWMduty = ((int)m->power)*(m->PWMperiod);
  1803  000B36  0E00               	movlw	0
  1804  000B38  6E75               	movwf	117,c	;volatile
  1805                           
  1806                           ;PWM.c: 58: 
  1807  000B3A  0E00               	movlw	0
  1808  000B3C  6E74               	movwf	116,c	;volatile
  1809                           
  1810                           ;PWM.c: 60: 
  1811  000B3E  0E00               	movlw	0
  1812  000B40  6E73               	movwf	115,c	;volatile
  1813                           
  1814                           ;PWM.c: 61:         PWMduty = (PWMduty>>9)+PWMduty>>7;
  1815  000B42  0E00               	movlw	0
  1816  000B44  6E72               	movwf	114,c	;volatile
  1817                           
  1818                           ;PWM.c: 63:     }
  1819  000B46  0E8F               	movlw	143
  1820  000B48  6E79               	movwf	121,c	;volatile
  1821                           
  1822                           ;PWM.c: 64:     else {
  1823  000B4A  0E01               	movlw	1
  1824  000B4C  6E78               	movwf	120,c	;volatile
  1825                           
  1826                           ;PWM.c: 65:         PWMduty = (PWMduty>>9)+PWMduty>>7;
  1827  000B4E  0E8F               	movlw	143
  1828  000B50  6E77               	movwf	119,c	;volatile
  1829                           
  1830                           ;PWM.c: 66:     }
  1831  000B52  0E01               	movlw	1
  1832  000B54  6E76               	movwf	118,c	;volatile
  1833  000B56  0012               	return		;funcret
  1834  000B58                     __end_of_initPWM:
  1835                           	opt callstack 0
  1836                           
  1837 ;; *************** function _initLCD *****************
  1838 ;; Defined at:
  1839 ;;		line 78 in file "LCD.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1853 ;;      Params:         0       0       0       0
  1854 ;;      Locals:         0       0       0       0
  1855 ;;      Temps:          1       0       0       0
  1856 ;;      Totals:         1       0       0       0
  1857 ;;Total ram usage:        1 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:   10
  1860 ;; This function calls:
  1861 ;;		_LCDout
  1862 ;;		_SendLCD
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text7
  1869  0009C8                     __ptext7:
  1870                           	opt callstack 0
  1871  0009C8                     _initLCD:
  1872                           	opt callstack 20
  1873  0009C8                     
  1874                           ;LCD.c: 81:     LCDout(0b0011);
  1875  0009C8  9C89               	bcf	137,6,c	;volatile
  1876                           
  1877                           ;LCD.c: 82: 
  1878  0009CA  9C92               	bcf	146,6,c	;volatile
  1879                           
  1880                           ;LCD.c: 84: 
  1881  0009CC  908B               	bcf	139,0,c	;volatile
  1882                           
  1883                           ;LCD.c: 85:     LCDout(0b0011);
  1884  0009CE  9094               	bcf	148,0,c	;volatile
  1885                           
  1886                           ;LCD.c: 87:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  1887  0009D0  928B               	bcf	139,1,c	;volatile
  1888                           
  1889                           ;LCD.c: 88: 
  1890  0009D2  9294               	bcf	148,1,c	;volatile
  1891                           
  1892                           ;LCD.c: 90: 
  1893  0009D4  948B               	bcf	139,2,c	;volatile
  1894                           
  1895                           ;LCD.c: 91:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1896  0009D6  9494               	bcf	148,2,c	;volatile
  1897                           
  1898                           ;LCD.c: 93:     LCDout(0b0010);
  1899  0009D8  908C               	bcf	140,0,c	;volatile
  1900                           
  1901                           ;LCD.c: 94: 
  1902  0009DA  9095               	bcf	149,0,c	;volatile
  1903                           
  1904                           ;LCD.c: 96: 
  1905  0009DC  928C               	bcf	140,1,c	;volatile
  1906                           
  1907                           ;LCD.c: 97:     SendLCD(0b00101000,0);
  1908  0009DE  9295               	bcf	149,1,c	;volatile
  1909  0009E0                     
  1910                           ;LCD.c: 100: 
  1911  0009E0  0E34               	movlw	52
  1912  0009E2  6E1B               	movwf	??_initLCD^0,c
  1913  0009E4  0EF2               	movlw	242
  1914  0009E6                     u997:
  1915  0009E6  2EE8               	decfsz	wreg,f,c
  1916  0009E8  D7FE               	bra	u997
  1917  0009EA  2E1B               	decfsz	??_initLCD^0,f,c
  1918  0009EC  D7FC               	bra	u997
  1919  0009EE                     
  1920                           ;LCD.c: 102: 
  1921  0009EE  0E03               	movlw	3
  1922  0009F0  ECBB  F006         	call	_LCDout
  1923  0009F4                     
  1924                           ;LCD.c: 104: 
  1925  0009F4  0E0D               	movlw	13
  1926  0009F6  6E1B               	movwf	??_initLCD^0,c
  1927  0009F8  0EFC               	movlw	252
  1928  0009FA                     u1007:
  1929  0009FA  2EE8               	decfsz	wreg,f,c
  1930  0009FC  D7FE               	bra	u1007
  1931  0009FE  2E1B               	decfsz	??_initLCD^0,f,c
  1932  000A00  D7FC               	bra	u1007
  1933                           
  1934                           ;LCD.c: 106: 
  1935  000A02  0E03               	movlw	3
  1936  000A04  ECBB  F006         	call	_LCDout
  1937  000A08                     
  1938                           ;LCD.c: 108: 
  1939  000A08  0E85               	movlw	133
  1940  000A0A                     u1017:
  1941  000A0A  2EE8               	decfsz	wreg,f,c
  1942  000A0C  D7FE               	bra	u1017
  1943  000A0E  F000               	nop	
  1944  000A10                     
  1945                           ;LCD.c: 110: 
  1946  000A10  0E03               	movlw	3
  1947  000A12  ECBB  F006         	call	_LCDout
  1948                           
  1949                           ;LCD.c: 112: 
  1950  000A16  0E21               	movlw	33
  1951  000A18                     u1027:
  1952  000A18  2EE8               	decfsz	wreg,f,c
  1953  000A1A  D7FE               	bra	u1027
  1954  000A1C  F000               	nop	
  1955  000A1E                     
  1956                           ;LCD.c: 114: 
  1957  000A1E  0E02               	movlw	2
  1958  000A20  ECBB  F006         	call	_LCDout
  1959  000A24                     
  1960                           ;LCD.c: 116: }
  1961  000A24  0E21               	movlw	33
  1962  000A26                     u1037:
  1963  000A26  2EE8               	decfsz	wreg,f,c
  1964  000A28  D7FE               	bra	u1037
  1965  000A2A  F000               	nop	
  1966                           
  1967                           ;LCD.c: 118: 
  1968  000A2C  0E00               	movlw	0
  1969  000A2E  6E17               	movwf	SendLCD@type^0,c
  1970  000A30  0E28               	movlw	40
  1971  000A32  ECF7  F006         	call	_SendLCD
  1972  000A36                     
  1973                           ;LCD.c: 120: 
  1974  000A36  0E21               	movlw	33
  1975  000A38                     u1047:
  1976  000A38  2EE8               	decfsz	wreg,f,c
  1977  000A3A  D7FE               	bra	u1047
  1978  000A3C  F000               	nop	
  1979  000A3E                     
  1980                           ;LCD.c: 122: void SetLine (char line){
  1981  000A3E  0E00               	movlw	0
  1982  000A40  6E17               	movwf	SendLCD@type^0,c
  1983  000A42  0E08               	movlw	8
  1984  000A44  ECF7  F006         	call	_SendLCD
  1985                           
  1986                           ;LCD.c: 124:     if (line==1){
  1987  000A48  0E21               	movlw	33
  1988  000A4A                     u1057:
  1989  000A4A  2EE8               	decfsz	wreg,f,c
  1990  000A4C  D7FE               	bra	u1057
  1991  000A4E  F000               	nop	
  1992  000A50                     
  1993                           ;LCD.c: 126:         SendLCD(0x80,0);
  1994  000A50  0E00               	movlw	0
  1995  000A52  6E17               	movwf	SendLCD@type^0,c
  1996  000A54  0E01               	movlw	1
  1997  000A56  ECF7  F006         	call	_SendLCD
  1998  000A5A                     
  1999                           ;LCD.c: 128:     } else if (line==2){
  2000  000A5A  0E0D               	movlw	13
  2001  000A5C  6E1B               	movwf	??_initLCD^0,c
  2002  000A5E  0EFC               	movlw	252
  2003  000A60                     u1067:
  2004  000A60  2EE8               	decfsz	wreg,f,c
  2005  000A62  D7FE               	bra	u1067
  2006  000A64  2E1B               	decfsz	??_initLCD^0,f,c
  2007  000A66  D7FC               	bra	u1067
  2008                           
  2009                           ;LCD.c: 130:         SendLCD(0xC0,0);
  2010  000A68  0E00               	movlw	0
  2011  000A6A  6E17               	movwf	SendLCD@type^0,c
  2012  000A6C  0E06               	movlw	6
  2013  000A6E  ECF7  F006         	call	_SendLCD
  2014  000A72                     
  2015                           ;LCD.c: 132:     }
  2016  000A72  0E21               	movlw	33
  2017  000A74                     u1077:
  2018  000A74  2EE8               	decfsz	wreg,f,c
  2019  000A76  D7FE               	bra	u1077
  2020  000A78  F000               	nop	
  2021  000A7A                     
  2022                           ;LCD.c: 134:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2023  000A7A  0E00               	movlw	0
  2024  000A7C  6E17               	movwf	SendLCD@type^0,c
  2025  000A7E  0E0C               	movlw	12
  2026  000A80  ECF7  F006         	call	_SendLCD
  2027                           
  2028                           ;LCD.c: 136: }
  2029  000A84  0E21               	movlw	33
  2030  000A86                     u1087:
  2031  000A86  2EE8               	decfsz	wreg,f,c
  2032  000A88  D7FE               	bra	u1087
  2033  000A8A  F000               	nop	
  2034  000A8C  0012               	return		;funcret
  2035  000A8E                     __end_of_initLCD:
  2036                           	opt callstack 0
  2037                           
  2038 ;; *************** function _SendLCD *****************
  2039 ;; Defined at:
  2040 ;;		line 57 in file "LCD.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  Byte            1    wreg     unsigned char 
  2043 ;;  type            1   22[COMRAM] unsigned char 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  Byte            1   25[COMRAM] unsigned char 
  2046 ;;  LowBits         1   24[COMRAM] unsigned char 
  2047 ;;  HighBits        1   23[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2057 ;;      Params:         1       0       0       0
  2058 ;;      Locals:         3       0       0       0
  2059 ;;      Temps:          0       0       0       0
  2060 ;;      Totals:         4       0       0       0
  2061 ;;Total ram usage:        4 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    9
  2064 ;; This function calls:
  2065 ;;		_LCDout
  2066 ;; This function is called by:
  2067 ;;		_initLCD
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text8
  2072  000DEE                     __ptext8:
  2073                           	opt callstack 0
  2074  000DEE                     _SendLCD:
  2075                           	opt callstack 20
  2076                           
  2077                           ;incstack = 0
  2078                           ;SendLCD@Byte stored from wreg
  2079  000DEE  6E1A               	movwf	SendLCD@Byte^0,c
  2080  000DF0                     
  2081                           ;LCD.c: 60:     LATAbits.LATA6=0;
  2082  000DF0  B017               	btfsc	SendLCD@type^0,0,c
  2083  000DF2  D002               	bra	u615
  2084  000DF4  9C89               	bcf	137,6,c	;volatile
  2085  000DF6  D001               	bra	u616
  2086  000DF8                     u615:
  2087  000DF8  8C89               	bsf	137,6,c	;volatile
  2088  000DFA                     u616:
  2089  000DFA                     
  2090                           ;LCD.c: 62: 
  2091  000DFA  501A               	movf	SendLCD@Byte^0,w,c
  2092  000DFC  0BF0               	andlw	240
  2093  000DFE  6E18               	movwf	SendLCD@HighBits^0,c
  2094                           
  2095                           ;LCD.c: 63:     LATCbits.LATC0 =0;
  2096  000E00  501A               	movf	SendLCD@Byte^0,w,c
  2097  000E02  0B0F               	andlw	15
  2098  000E04  6E19               	movwf	SendLCD@LowBits^0,c
  2099  000E06                     
  2100                           ;LCD.c: 66:     LATCbits.LATC1=0;
  2101  000E06  3818               	swapf	SendLCD@HighBits^0,w,c
  2102  000E08  0B0F               	andlw	15
  2103  000E0A  ECBB  F006         	call	_LCDout
  2104  000E0E                     
  2105                           ;LCD.c: 67:     TRISCbits.RC1=0;
  2106  000E0E  0E06               	movlw	6
  2107  000E10                     u1097:
  2108  000E10  2EE8               	decfsz	wreg,f,c
  2109  000E12  D7FE               	bra	u1097
  2110  000E14  D000               	nop2	
  2111  000E16                     
  2112                           ;LCD.c: 70:     TRISCbits.RC2=0;
  2113  000E16  5019               	movf	SendLCD@LowBits^0,w,c
  2114  000E18  ECBB  F006         	call	_LCDout
  2115  000E1C                     
  2116                           ;LCD.c: 71: 
  2117  000E1C  0E06               	movlw	6
  2118  000E1E                     u1107:
  2119  000E1E  2EE8               	decfsz	wreg,f,c
  2120  000E20  D7FE               	bra	u1107
  2121  000E22  D000               	nop2	
  2122  000E24  0012               	return		;funcret
  2123  000E26                     __end_of_SendLCD:
  2124                           	opt callstack 0
  2125                           
  2126 ;; *************** function _LCDout *****************
  2127 ;; Defined at:
  2128 ;;		line 41 in file "LCD.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  number          1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  number          1   21[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2142 ;;      Params:         0       0       0       0
  2143 ;;      Locals:         1       0       0       0
  2144 ;;      Temps:          2       0       0       0
  2145 ;;      Totals:         3       0       0       0
  2146 ;;Total ram usage:        3 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    8
  2149 ;; This function calls:
  2150 ;;		_E_TOG
  2151 ;; This function is called by:
  2152 ;;		_SendLCD
  2153 ;;		_initLCD
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text9
  2158  000D76                     __ptext9:
  2159                           	opt callstack 0
  2160  000D76                     _LCDout:
  2161                           	opt callstack 20
  2162                           
  2163                           ;incstack = 0
  2164                           ;LCDout@number stored from wreg
  2165  000D76  6E16               	movwf	LCDout@number^0,c
  2166  000D78                     
  2167                           ;LCD.c: 46:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2168  000D78  CF8B F014          	movff	3979,??_LCDout	;volatile
  2169  000D7C  0EF9               	movlw	249
  2170  000D7E  1614               	andwf	??_LCDout^0,f,c
  2171  000D80  C016  F015         	movff	LCDout@number,??_LCDout+1
  2172  000D84  0E03               	movlw	3
  2173  000D86  1615               	andwf	(??_LCDout+1)^0,f,c
  2174  000D88  90D8               	bcf	status,0,c
  2175  000D8A  3415               	rlcf	(??_LCDout+1)^0,w,c
  2176  000D8C  1014               	iorwf	??_LCDout^0,w,c
  2177  000D8E  6E8B               	movwf	139,c	;volatile
  2178                           
  2179                           ;LCD.c: 47: 
  2180  000D90  CF8C F014          	movff	3980,??_LCDout	;volatile
  2181  000D94  0EFC               	movlw	252
  2182  000D96  1614               	andwf	??_LCDout^0,f,c
  2183  000D98  4016               	rrncf	LCDout@number^0,w,c
  2184  000D9A  42E8               	rrncf	wreg,f,c
  2185  000D9C  0B3F               	andlw	63
  2186  000D9E  0B03               	andlw	3
  2187  000DA0  1014               	iorwf	??_LCDout^0,w,c
  2188  000DA2  6E8C               	movwf	140,c	;volatile
  2189  000DA4                     
  2190                           ;LCD.c: 49:     LCDout(LowBits);
  2191  000DA4  EC66  F007         	call	_E_TOG	;wreg free
  2192  000DA8                     
  2193                           ;LCD.c: 50:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2194  000DA8  0E03               	movlw	3
  2195  000DAA                     u1117:
  2196  000DAA  2EE8               	decfsz	wreg,f,c
  2197  000DAC  D7FE               	bra	u1117
  2198  000DAE  F000               	nop	
  2199  000DB0  0012               	return		;funcret
  2200  000DB2                     __end_of_LCDout:
  2201                           	opt callstack 0
  2202                           
  2203 ;; *************** function _E_TOG *****************
  2204 ;; Defined at:
  2205 ;;		line 28 in file "LCD.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2219 ;;      Params:         0       0       0       0
  2220 ;;      Locals:         0       0       0       0
  2221 ;;      Temps:          0       0       0       0
  2222 ;;      Totals:         0       0       0       0
  2223 ;;Total ram usage:        0 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    7
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_LCDout
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text10
  2234  000ECC                     __ptext10:
  2235                           	opt callstack 0
  2236  000ECC                     _E_TOG:
  2237                           	opt callstack 20
  2238  000ECC                     
  2239                           ;LCD.c: 30: 
  2240  000ECC  808B               	bsf	139,0,c	;volatile
  2241  000ECE                     
  2242                           ;LCD.c: 32: 
  2243  000ECE  0E03               	movlw	3
  2244  000ED0                     u1127:
  2245  000ED0  2EE8               	decfsz	wreg,f,c
  2246  000ED2  D7FE               	bra	u1127
  2247  000ED4  F000               	nop	
  2248  000ED6                     
  2249                           ;LCD.c: 34: 
  2250  000ED6  908B               	bcf	139,0,c	;volatile
  2251  000ED8  0012               	return		;funcret
  2252  000EDA                     __end_of_E_TOG:
  2253                           	opt callstack 0
  2254                           
  2255 ;; *************** function _initIR *****************
  2256 ;; Defined at:
  2257 ;;		line 30 in file "IR.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2271 ;;      Params:         0       0       0       0
  2272 ;;      Locals:         0       0       0       0
  2273 ;;      Temps:          0       0       0       0
  2274 ;;      Totals:         0       0       0       0
  2275 ;;Total ram usage:        0 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    7
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text11
  2286  000E84                     __ptext11:
  2287                           	opt callstack 0
  2288  000E84                     _initIR:
  2289                           	opt callstack 23
  2290  000E84                     
  2291                           ;IR.c: 32:     void findStrengths(int *leftIR, int *rightIR){
  2292  000E84  0E00               	movlw	0
  2293  000E86  6EB8               	movwf	184,c	;volatile
  2294                           
  2295                           ;IR.c: 33: 
  2296  000E88  0E00               	movlw	0
  2297  000E8A  6EB9               	movwf	185,c	;volatile
  2298  000E8C                     
  2299                           ;IR.c: 36:     *rightIR = (CAP3BUFL|(CAP3BUFH<<8));
  2300  000E8C  9689               	bcf	137,3,c	;volatile
  2301  000E8E                     
  2302                           ;IR.c: 37: }
  2303  000E8E  9889               	bcf	137,4,c	;volatile
  2304  000E90  8692               	bsf	146,3,c	;volatile
  2305  000E92  8892               	bsf	146,4,c	;volatile
  2306  000E94  0E46               	movlw	70
  2307  000E96  6E62               	movwf	98,c	;volatile
  2308  000E98  0E46               	movlw	70
  2309  000E9A  6E61               	movwf	97,c	;volatile
  2310  000E9C  0E11               	movlw	17
  2311  000E9E  6EB7               	movwf	183,c	;volatile
  2312  000EA0  0012               	return		;funcret
  2313  000EA2                     __end_of_initIR:
  2314                           	opt callstack 0
  2315                           
  2316 ;; *************** function _initEusart *****************
  2317 ;; Defined at:
  2318 ;;		line 13 in file "eusart.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2332 ;;      Params:         0       0       0       0
  2333 ;;      Locals:         0       0       0       0
  2334 ;;      Temps:          0       0       0       0
  2335 ;;      Totals:         0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    7
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text12
  2347  000EA2                     __ptext12:
  2348                           	opt callstack 0
  2349  000EA2                     _initEusart:
  2350                           	opt callstack 23
  2351  000EA2                     
  2352                           ;eusart.c: 16:     LATCbits.LATC7 = 0;
  2353  000EA2  9E8B               	bcf	139,7,c	;volatile
  2354                           
  2355                           ;eusart.c: 17:     TRISCbits.RC7 = 1;
  2356  000EA4  8E94               	bsf	148,7,c	;volatile
  2357  000EA6                     
  2358                           ;eusart.c: 19:     SPBRG = 207;
  2359  000EA6  0ECF               	movlw	207
  2360  000EA8  6EAF               	movwf	175,c	;volatile
  2361                           
  2362                           ;eusart.c: 20:     SPBRGH = 0;
  2363  000EAA  0E00               	movlw	0
  2364  000EAC  6EB0               	movwf	176,c	;volatile
  2365  000EAE                     
  2366                           ;eusart.c: 21:     BAUDCONbits.BRG16 = 1;
  2367  000EAE  86AA               	bsf	170,3,c	;volatile
  2368  000EB0                     
  2369                           ;eusart.c: 22:     TXSTAbits.BRGH = 1;
  2370  000EB0  84AC               	bsf	172,2,c	;volatile
  2371  000EB2                     
  2372                           ;eusart.c: 23:     RCSTAbits.CREN = 1;
  2373  000EB2  88AB               	bsf	171,4,c	;volatile
  2374  000EB4                     
  2375                           ;eusart.c: 24:     RCSTAbits.SPEN = 1;
  2376  000EB4  8EAB               	bsf	171,7,c	;volatile
  2377  000EB6                     
  2378                           ;eusart.c: 25:     TXSTAbits.TXEN = 0;
  2379  000EB6  9AAC               	bcf	172,5,c	;volatile
  2380  000EB8  0012               	return		;funcret
  2381  000EBA                     __end_of_initEusart:
  2382                           	opt callstack 0
  2383                           
  2384 ;; *************** function _findStrengths *****************
  2385 ;; Defined at:
  2386 ;;		line 57 in file "IR.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  leftIR          2   19[COMRAM] PTR int 
  2389 ;;		 -> main@leftIR(2), 
  2390 ;;  rightIR         2   21[COMRAM] PTR int 
  2391 ;;		 -> main@rightIR(2), 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2403 ;;      Params:         4       0       0       0
  2404 ;;      Locals:         0       0       0       0
  2405 ;;      Temps:          4       0       0       0
  2406 ;;      Totals:         8       0       0       0
  2407 ;;Total ram usage:        8 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    7
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text13
  2418  000C58                     __ptext13:
  2419                           	opt callstack 0
  2420  000C58                     _findStrengths:
  2421                           	opt callstack 23
  2422  000C58  5067               	movf	103,w,c	;volatile
  2423  000C5A  6E19               	movwf	(??_findStrengths+1)^0,c
  2424  000C5C  6A18               	clrf	??_findStrengths^0,c
  2425  000C5E  5066               	movf	102,w,c	;volatile
  2426  000C60  6E1A               	movwf	(??_findStrengths+2)^0,c
  2427  000C62  6A1B               	clrf	(??_findStrengths+3)^0,c
  2428  000C64  5018               	movf	??_findStrengths^0,w,c
  2429  000C66  121A               	iorwf	(??_findStrengths+2)^0,f,c
  2430  000C68  5019               	movf	(??_findStrengths+1)^0,w,c
  2431  000C6A  121B               	iorwf	(??_findStrengths+3)^0,f,c
  2432  000C6C  C014  FFD9         	movff	findStrengths@leftIR,fsr2l
  2433  000C70  C015  FFDA         	movff	findStrengths@leftIR+1,fsr2h
  2434  000C74  C01A  FFDE         	movff	??_findStrengths+2,postinc2
  2435  000C78  C01B  FFDD         	movff	??_findStrengths+3,postdec2
  2436  000C7C  5065               	movf	101,w,c	;volatile
  2437  000C7E  6E19               	movwf	(??_findStrengths+1)^0,c
  2438  000C80  6A18               	clrf	??_findStrengths^0,c
  2439  000C82  5064               	movf	100,w,c	;volatile
  2440  000C84  6E1A               	movwf	(??_findStrengths+2)^0,c
  2441  000C86  6A1B               	clrf	(??_findStrengths+3)^0,c
  2442  000C88  5018               	movf	??_findStrengths^0,w,c
  2443  000C8A  121A               	iorwf	(??_findStrengths+2)^0,f,c
  2444  000C8C  5019               	movf	(??_findStrengths+1)^0,w,c
  2445  000C8E  121B               	iorwf	(??_findStrengths+3)^0,f,c
  2446  000C90  C016  FFD9         	movff	findStrengths@rightIR,fsr2l
  2447  000C94  C017  FFDA         	movff	findStrengths@rightIR+1,fsr2h
  2448  000C98  C01A  FFDE         	movff	??_findStrengths+2,postinc2
  2449  000C9C  C01B  FFDD         	movff	??_findStrengths+3,postdec2
  2450  000CA0  0012               	return		;funcret
  2451  000CA2                     __end_of_findStrengths:
  2452                           	opt callstack 0
  2453                           
  2454 ;; *************** function _my_lp_isr *****************
  2455 ;; Defined at:
  2456 ;;		line 300 in file "main.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  LastRFID        1    0        unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2470 ;;      Params:         0       0       0       0
  2471 ;;      Locals:         1       0       0       0
  2472 ;;      Temps:          7       0       0       0
  2473 ;;      Totals:         8       0       0       0
  2474 ;;Total ram usage:        8 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    6
  2477 ;; This function calls:
  2478 ;;		_sendRFID
  2479 ;; This function is called by:
  2480 ;;		Interrupt level 1
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	intcodelo
  2485  000018                     __pintcodelo:
  2486                           	opt callstack 0
  2487  000018                     _my_lp_isr:
  2488                           	opt callstack 20
  2489                           
  2490                           ;incstack = 0
  2491  000018  8034               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2492  00001A  CFD8 F00C          	movff	status,??_my_lp_isr
  2493  00001E  CFE8 F00D          	movff	wreg,??_my_lp_isr+1
  2494  000022  CFE0 F00E          	movff	bsr,??_my_lp_isr+2
  2495  000026  CFF6 F00F          	movff	tblptrl,??_my_lp_isr+3
  2496  00002A  CFF7 F010          	movff	tblptrh,??_my_lp_isr+4
  2497  00002E  CFF8 F011          	movff	tblptru,??_my_lp_isr+5
  2498  000032  CFF5 F012          	movff	tablat,??_my_lp_isr+6
  2499  000036                     
  2500                           ;main.c: 302:     if (PIR1bits.RCIF) {
  2501  000036  AA9E               	btfss	158,5,c	;volatile
  2502  000038  EF20  F000         	goto	i1u96_21
  2503  00003C  EF22  F000         	goto	i1u96_20
  2504  000040                     i1u96_21:
  2505  000040  EF2B  F000         	goto	i1l119
  2506  000044                     i1u96_20:
  2507  000044                     
  2508                           ;main.c: 305:         sendRFID();
  2509  000044  EC67  F004         	call	_sendRFID	;wreg free
  2510  000048                     
  2511                           ;main.c: 307:         IRsource = 1;
  2512  000048  0E01               	movlw	1
  2513  00004A  0100               	movlb	0	; () banked
  2514  00004C  6FFC               	movwf	_IRsource& (0+255),b
  2515  00004E                     
  2516                           ; BSR set to: 0
  2517                           ;main.c: 308:         RFIDread = 1;
  2518  00004E  0E01               	movlw	1
  2519  000050  6FFD               	movwf	_RFIDread& (0+255),b
  2520  000052                     
  2521                           ; BSR set to: 0
  2522                           ;main.c: 309:         LATDbits.LATD2 = 1;
  2523  000052  848C               	bsf	140,2,c	;volatile
  2524  000054                     
  2525                           ; BSR set to: 0
  2526  000054  50AE               	movf	174,w,c	;volatile
  2527  000056                     i1l119:
  2528  000056  C012  FFF5         	movff	??_my_lp_isr+6,tablat
  2529  00005A  C011  FFF8         	movff	??_my_lp_isr+5,tblptru
  2530  00005E  C010  FFF7         	movff	??_my_lp_isr+4,tblptrh
  2531  000062  C00F  FFF6         	movff	??_my_lp_isr+3,tblptrl
  2532  000066  C00E  FFE0         	movff	??_my_lp_isr+2,bsr
  2533  00006A  C00D  FFE8         	movff	??_my_lp_isr+1,wreg
  2534  00006E  C00C  FFD8         	movff	??_my_lp_isr,status
  2535  000072  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2536  000074  0010               	retfie	
  2537  000076                     __end_of_my_lp_isr:
  2538                           	opt callstack 0
  2539                           
  2540 ;; *************** function _sendRFID *****************
  2541 ;; Defined at:
  2542 ;;		line 16 in file "RFID.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2556 ;;      Params:         0       0       0       0
  2557 ;;      Locals:         0       0       0       0
  2558 ;;      Temps:          0       0       0       0
  2559 ;;      Totals:         0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    5
  2563 ;; This function calls:
  2564 ;;		_LCD_String
  2565 ;;		_SetLine
  2566 ;;		_getCharSerial
  2567 ;;		i1_SendLCD
  2568 ;; This function is called by:
  2569 ;;		_my_lp_isr
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text15
  2574  0008CE                     __ptext15:
  2575                           	opt callstack 0
  2576  0008CE                     _sendRFID:
  2577                           	opt callstack 20
  2578  0008CE                     
  2579                           ;RFID.c: 17:     SetLine(1);
  2580  0008CE  0E01               	movlw	1
  2581  0008D0  EC98  F006         	call	_SetLine
  2582                           
  2583                           ;RFID.c: 18:     SendLCD(0b00000001,0);
  2584  0008D4  0E00               	movlw	0
  2585  0008D6  6E05               	movwf	i1SendLCD@type^0,c
  2586  0008D8  0E01               	movlw	1
  2587  0008DA  EC13  F007         	call	i1_SendLCD
  2588  0008DE                     
  2589                           ;RFID.c: 19:     a = getCharSerial();
  2590  0008DE  EC5D  F007         	call	_getCharSerial	;wreg free
  2591  0008E2  6E2F               	movwf	_a^0,c
  2592  0008E4                     
  2593                           ;RFID.c: 20:     if (a == 0x02) {
  2594  0008E4  0E02               	movlw	2
  2595  0008E6  182F               	xorwf	_a^0,w,c
  2596  0008E8  A4D8               	btfss	status,2,c
  2597  0008EA  EF79  F004         	goto	i1u65_21
  2598  0008EE  EF7B  F004         	goto	i1u65_20
  2599  0008F2                     i1u65_21:
  2600  0008F2  EFE3  F004         	goto	i1l309
  2601  0008F6                     i1u65_20:
  2602  0008F6  EFDA  F004         	goto	i1l1625
  2603  0008FA                     i1l1591:
  2604                           
  2605                           ;RFID.c: 22:             a = getCharSerial();
  2606  0008FA  EC5D  F007         	call	_getCharSerial	;wreg free
  2607  0008FE  6E2F               	movwf	_a^0,c
  2608  000900                     
  2609                           ;RFID.c: 23:             if (index <= 12) {
  2610  000900  0E0D               	movlw	13
  2611  000902  6033               	cpfslt	_index^0,c
  2612  000904  EF86  F004         	goto	i1u66_21
  2613  000908  EF88  F004         	goto	i1u66_20
  2614  00090C                     i1u66_21:
  2615  00090C  EFDA  F004         	goto	i1l1625
  2616  000910                     i1u66_20:
  2617  000910                     
  2618                           ;RFID.c: 24:                 SendLCD(a, 1);
  2619  000910  0E01               	movlw	1
  2620  000912  6E05               	movwf	i1SendLCD@type^0,c
  2621  000914  502F               	movf	_a^0,w,c
  2622  000916  EC13  F007         	call	i1_SendLCD
  2623  00091A                     
  2624                           ;RFID.c: 28:                 if (a > 64) {
  2625  00091A  0E40               	movlw	64
  2626  00091C  642F               	cpfsgt	_a^0,c
  2627  00091E  EF93  F004         	goto	i1u67_21
  2628  000922  EF95  F004         	goto	i1u67_20
  2629  000926                     i1u67_21:
  2630  000926  EF9A  F004         	goto	i1l1601
  2631  00092A                     i1u67_20:
  2632  00092A                     
  2633                           ;RFID.c: 30:                     a = a - 55;
  2634  00092A  502F               	movf	_a^0,w,c
  2635  00092C  0FC9               	addlw	201
  2636  00092E  6E2F               	movwf	_a^0,c
  2637                           
  2638                           ;RFID.c: 32:                 } else {
  2639  000930  EF9D  F004         	goto	i1l301
  2640  000934                     i1l1601:
  2641                           
  2642                           ;RFID.c: 34:                     a = a - 48;
  2643  000934  502F               	movf	_a^0,w,c
  2644  000936  0FD0               	addlw	208
  2645  000938  6E2F               	movwf	_a^0,c
  2646  00093A                     i1l301:
  2647                           
  2648                           ;RFID.c: 37:                 currentVal = (a | currentVal);
  2649  00093A  502F               	movf	_a^0,w,c
  2650  00093C  1031               	iorwf	_currentVal^0,w,c
  2651  00093E  6E31               	movwf	_currentVal^0,c
  2652  000940                     
  2653                           ;RFID.c: 39:                 if (index % 2 == 1) {
  2654  000940  A033               	btfss	_index^0,0,c
  2655  000942  EFA5  F004         	goto	i1u68_21
  2656  000946  EFA7  F004         	goto	i1u68_20
  2657  00094A                     i1u68_21:
  2658  00094A  EFAC  F004         	goto	i1l1607
  2659  00094E                     i1u68_20:
  2660  00094E                     
  2661                           ;RFID.c: 41:                     currentVal = currentVal << 4;
  2662  00094E  3831               	swapf	_currentVal^0,w,c
  2663  000950  0BF0               	andlw	240
  2664  000952  6E31               	movwf	_currentVal^0,c
  2665                           
  2666                           ;RFID.c: 43:                 } else {
  2667  000954  EFD8  F004         	goto	i1l1623
  2668  000958                     i1l1607:
  2669                           
  2670                           ;RFID.c: 45:                     if (index < 11) {
  2671  000958  0E0B               	movlw	11
  2672  00095A  6033               	cpfslt	_index^0,c
  2673  00095C  EFB2  F004         	goto	i1u69_21
  2674  000960  EFB4  F004         	goto	i1u69_20
  2675  000964                     i1u69_21:
  2676  000964  EFB9  F004         	goto	i1l1611
  2677  000968                     i1u69_20:
  2678  000968                     
  2679                           ;RFID.c: 47:                         checkSum = checkSum^currentVal;
  2680  000968  5030               	movf	_checkSum^0,w,c
  2681  00096A  1831               	xorwf	_currentVal^0,w,c
  2682  00096C  6E30               	movwf	_checkSum^0,c
  2683                           
  2684                           ;RFID.c: 49:                     } else {
  2685  00096E  EFD6  F004         	goto	i1l1621
  2686  000972                     i1l1611:
  2687                           
  2688                           ;RFID.c: 51:                         if (checkSum == currentVal) {
  2689  000972  5031               	movf	_currentVal^0,w,c
  2690  000974  1830               	xorwf	_checkSum^0,w,c
  2691  000976  A4D8               	btfss	status,2,c
  2692  000978  EFC0  F004         	goto	i1u70_21
  2693  00097C  EFC2  F004         	goto	i1u70_20
  2694  000980                     i1u70_21:
  2695  000980  EFCD  F004         	goto	i1l1617
  2696  000984                     i1u70_20:
  2697  000984                     
  2698                           ;RFID.c: 53:                             SetLine(2);
  2699  000984  0E02               	movlw	2
  2700  000986  EC98  F006         	call	_SetLine
  2701  00098A                     
  2702                           ;RFID.c: 55:                             LCD_String("Match");
  2703  00098A  0E04               	movlw	low (STR_2+3)
  2704  00098C  6E09               	movwf	LCD_String@string^0,c
  2705  00098E  0E03               	movlw	high (STR_2+3)
  2706  000990  6E0A               	movwf	(LCD_String@string+1)^0,c
  2707  000992  EC51  F006         	call	_LCD_String	;wreg free
  2708                           
  2709                           ;RFID.c: 57:                         } else {
  2710  000996  EFD6  F004         	goto	i1l1621
  2711  00099A                     i1l1617:
  2712                           
  2713                           ;RFID.c: 59:                             SetLine(2);
  2714  00099A  0E02               	movlw	2
  2715  00099C  EC98  F006         	call	_SetLine
  2716  0009A0                     
  2717                           ;RFID.c: 61:                             LCD_String("No Match");
  2718  0009A0  0E01               	movlw	low STR_2
  2719  0009A2  6E09               	movwf	LCD_String@string^0,c
  2720  0009A4  0E03               	movlw	high STR_2
  2721  0009A6  6E0A               	movwf	(LCD_String@string+1)^0,c
  2722  0009A8  EC51  F006         	call	_LCD_String	;wreg free
  2723  0009AC                     i1l1621:
  2724                           
  2725                           ;RFID.c: 66:                     currentVal = 0;
  2726  0009AC  0E00               	movlw	0
  2727  0009AE  6E31               	movwf	_currentVal^0,c
  2728  0009B0                     i1l1623:
  2729                           
  2730                           ;RFID.c: 70:                 index = index + 1;
  2731  0009B0  2833               	incf	_index^0,w,c
  2732  0009B2  6E33               	movwf	_index^0,c
  2733  0009B4                     i1l1625:
  2734                           
  2735                           ;RFID.c: 21:         while (a != 0x0A) {
  2736  0009B4  0E0A               	movlw	10
  2737  0009B6  182F               	xorwf	_a^0,w,c
  2738  0009B8  A4D8               	btfss	status,2,c
  2739  0009BA  EFE1  F004         	goto	i1u71_21
  2740  0009BE  EFE3  F004         	goto	i1u71_20
  2741  0009C2                     i1u71_21:
  2742  0009C2  EF7D  F004         	goto	i1l1591
  2743  0009C6                     i1u71_20:
  2744  0009C6                     i1l309:
  2745  0009C6  0012               	return		;funcret
  2746  0009C8                     __end_of_sendRFID:
  2747                           	opt callstack 0
  2748                           
  2749 ;; *************** function _getCharSerial *****************
  2750 ;; Defined at:
  2751 ;;		line 34 in file "eusart.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      unsigned char 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2765 ;;      Params:         0       0       0       0
  2766 ;;      Locals:         0       0       0       0
  2767 ;;      Temps:          0       0       0       0
  2768 ;;      Totals:         0       0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    1
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_sendRFID
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text16
  2780  000EBA                     __ptext16:
  2781                           	opt callstack 0
  2782  000EBA                     _getCharSerial:
  2783                           	opt callstack 23
  2784  000EBA                     i1l143:
  2785  000EBA  AA9E               	btfss	158,5,c	;volatile
  2786  000EBC  EF62  F007         	goto	i1u59_21
  2787  000EC0  EF64  F007         	goto	i1u59_20
  2788  000EC4                     i1u59_21:
  2789  000EC4  EF5D  F007         	goto	i1l143
  2790  000EC8                     i1u59_20:
  2791  000EC8                     
  2792                           ;eusart.c: 38:     return RCREG;
  2793  000EC8  50AE               	movf	174,w,c	;volatile
  2794  000ECA  0012               	return		;funcret
  2795  000ECC                     __end_of_getCharSerial:
  2796                           	opt callstack 0
  2797                           
  2798 ;; *************** function _SetLine *****************
  2799 ;; Defined at:
  2800 ;;		line 143 in file "LCD.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  line            1    wreg     unsigned char 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  line            1    8[COMRAM] unsigned char 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2814 ;;      Params:         0       0       0       0
  2815 ;;      Locals:         1       0       0       0
  2816 ;;      Temps:          0       0       0       0
  2817 ;;      Totals:         1       0       0       0
  2818 ;;Total ram usage:        1 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		i1_SendLCD
  2823 ;; This function is called by:
  2824 ;;		_sendRFID
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text17
  2829  000D30                     __ptext17:
  2830                           	opt callstack 0
  2831  000D30                     _SetLine:
  2832                           	opt callstack 20
  2833                           
  2834                           ;incstack = 0
  2835                           ;SetLine@line stored from wreg
  2836  000D30  6E09               	movwf	SetLine@line^0,c
  2837  000D32                     
  2838                           ;LCD.c: 145: 
  2839  000D32  0409               	decf	SetLine@line^0,w,c
  2840  000D34  A4D8               	btfss	status,2,c
  2841  000D36  EF9F  F006         	goto	i1u62_21
  2842  000D3A  EFA1  F006         	goto	i1u62_20
  2843  000D3E                     i1u62_21:
  2844  000D3E  EFA8  F006         	goto	i1l1503
  2845  000D42                     i1u62_20:
  2846  000D42                     
  2847                           ;LCD.c: 147: 
  2848  000D42  0E00               	movlw	0
  2849  000D44  6E05               	movwf	i1SendLCD@type^0,c
  2850  000D46  0E80               	movlw	128
  2851  000D48  EC13  F007         	call	i1_SendLCD
  2852                           
  2853                           ;LCD.c: 149:         _delay((unsigned long)((50)*(8000000/4000.0)));
  2854  000D4C  EFB6  F006         	goto	i1l1507
  2855  000D50                     i1l1503:
  2856  000D50  0E02               	movlw	2
  2857  000D52  1809               	xorwf	SetLine@line^0,w,c
  2858  000D54  A4D8               	btfss	status,2,c
  2859  000D56  EFAF  F006         	goto	i1u63_21
  2860  000D5A  EFB1  F006         	goto	i1u63_20
  2861  000D5E                     i1u63_21:
  2862  000D5E  EFB6  F006         	goto	i1l1507
  2863  000D62                     i1u63_20:
  2864  000D62                     
  2865                           ;LCD.c: 151:     }
  2866  000D62  0E00               	movlw	0
  2867  000D64  6E05               	movwf	i1SendLCD@type^0,c
  2868  000D66  0EC0               	movlw	192
  2869  000D68  EC13  F007         	call	i1_SendLCD
  2870  000D6C                     i1l1507:
  2871  000D6C  0E21               	movlw	33
  2872  000D6E                     i1u113_27:
  2873  000D6E  2EE8               	decfsz	wreg,f,c
  2874  000D70  D7FE               	bra	i1u113_27
  2875  000D72  F000               	nop	
  2876  000D74  0012               	return		;funcret
  2877  000D76                     __end_of_SetLine:
  2878                           	opt callstack 0
  2879                           
  2880 ;; *************** function _LCD_String *****************
  2881 ;; Defined at:
  2882 ;;		line 163 in file "LCD.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  string          2    8[COMRAM] PTR unsigned char 
  2885 ;;		 -> STR_2(9), STR_1(6), 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2897 ;;      Params:         2       0       0       0
  2898 ;;      Locals:         0       0       0       0
  2899 ;;      Temps:          1       0       0       0
  2900 ;;      Totals:         3       0       0       0
  2901 ;;Total ram usage:        3 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    4
  2904 ;; This function calls:
  2905 ;;		i1_SendLCD
  2906 ;; This function is called by:
  2907 ;;		_sendRFID
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text18
  2912  000CA2                     __ptext18:
  2913                           	opt callstack 0
  2914  000CA2                     _LCD_String:
  2915                           	opt callstack 20
  2916  000CA2  EF66  F006         	goto	i1l1517
  2917  000CA6                     i1l1511:
  2918  000CA6  0E01               	movlw	1
  2919  000CA8  6E05               	movwf	i1SendLCD@type^0,c
  2920  000CAA  C009  FFF6         	movff	LCD_String@string,tblptrl
  2921  000CAE  C00A  FFF7         	movff	LCD_String@string+1,tblptrh
  2922  000CB2                     	if	0	;tblptru may be non-zero
  2923  000CB2                     	endif
  2924  000CB2                     	if	0	;tblptru may be non-zero
  2925  000CB2                     	endif
  2926  000CB2  0008               	tblrd		*
  2927  000CB4  50F5               	movf	tablat,w,c
  2928  000CB6  EC13  F007         	call	i1_SendLCD
  2929  000CBA  4A09               	infsnz	LCD_String@string^0,f,c
  2930  000CBC  2A0A               	incf	(LCD_String@string+1)^0,f,c
  2931  000CBE  0E82               	movlw	130
  2932  000CC0  6E0B               	movwf	??_LCD_String^0,c
  2933  000CC2  0EDE               	movlw	222
  2934  000CC4                     i1u114_27:
  2935  000CC4  2EE8               	decfsz	wreg,f,c
  2936  000CC6  D7FE               	bra	i1u114_27
  2937  000CC8  2E0B               	decfsz	??_LCD_String^0,f,c
  2938  000CCA  D7FC               	bra	i1u114_27
  2939  000CCC                     i1l1517:
  2940  000CCC  C009  FFF6         	movff	LCD_String@string,tblptrl
  2941  000CD0  C00A  FFF7         	movff	LCD_String@string+1,tblptrh
  2942  000CD4                     	if	0	;tblptru may be non-zero
  2943  000CD4                     	endif
  2944  000CD4                     	if	0	;tblptru may be non-zero
  2945  000CD4                     	endif
  2946  000CD4  0008               	tblrd		*
  2947  000CD6  50F5               	movf	tablat,w,c
  2948  000CD8  0900               	iorlw	0
  2949  000CDA  A4D8               	btfss	status,2,c
  2950  000CDC  EF72  F006         	goto	i1u64_21
  2951  000CE0  EF74  F006         	goto	i1u64_20
  2952  000CE4                     i1u64_21:
  2953  000CE4  EF53  F006         	goto	i1l1511
  2954  000CE8                     i1u64_20:
  2955  000CE8  0012               	return		;funcret
  2956  000CEA                     __end_of_LCD_String:
  2957                           	opt callstack 0
  2958                           
  2959 ;; *************** function i1_SendLCD *****************
  2960 ;; Defined at:
  2961 ;;		line 57 in file "LCD.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  Byte            1    wreg     unsigned char 
  2964 ;;  type            1    4[COMRAM] unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  Byte            1    7[COMRAM] unsigned char 
  2967 ;;  SendLCD         1    6[COMRAM] unsigned char 
  2968 ;;  SendLCD         1    5[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2978 ;;      Params:         1       0       0       0
  2979 ;;      Locals:         3       0       0       0
  2980 ;;      Temps:          0       0       0       0
  2981 ;;      Totals:         4       0       0       0
  2982 ;;Total ram usage:        4 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    3
  2985 ;; This function calls:
  2986 ;;		i1_LCDout
  2987 ;; This function is called by:
  2988 ;;		_SetLine
  2989 ;;		_LCD_String
  2990 ;;		_sendRFID
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text19
  2995  000E26                     __ptext19:
  2996                           	opt callstack 0
  2997  000E26                     i1_SendLCD:
  2998                           	opt callstack 21
  2999                           
  3000                           ;incstack = 0
  3001                           ;i1SendLCD@Byte stored from wreg
  3002  000E26  6E08               	movwf	i1SendLCD@Byte^0,c
  3003  000E28                     
  3004                           ;LCD.c: 60:     LATAbits.LATA6=0;
  3005  000E28  B005               	btfsc	i1SendLCD@type^0,0,c
  3006  000E2A  D002               	bra	i1u57_25
  3007  000E2C  9C89               	bcf	137,6,c	;volatile
  3008  000E2E  D001               	bra	i1u57_26
  3009  000E30                     i1u57_25:
  3010  000E30  8C89               	bsf	137,6,c	;volatile
  3011  000E32                     i1u57_26:
  3012  000E32                     
  3013                           ;LCD.c: 62: 
  3014  000E32  5008               	movf	i1SendLCD@Byte^0,w,c
  3015  000E34  0BF0               	andlw	240
  3016  000E36  6E06               	movwf	i1SendLCD@HighBits^0,c
  3017                           
  3018                           ;LCD.c: 63:     LATCbits.LATC0 =0;
  3019  000E38  5008               	movf	i1SendLCD@Byte^0,w,c
  3020  000E3A  0B0F               	andlw	15
  3021  000E3C  6E07               	movwf	i1SendLCD@LowBits^0,c
  3022  000E3E                     
  3023                           ;LCD.c: 66:     LATCbits.LATC1=0;
  3024  000E3E  3806               	swapf	i1SendLCD@HighBits^0,w,c
  3025  000E40  0B0F               	andlw	15
  3026  000E42  ECD9  F006         	call	i1_LCDout
  3027  000E46                     
  3028                           ;LCD.c: 67:     TRISCbits.RC1=0;
  3029  000E46  0E06               	movlw	6
  3030  000E48                     i1u115_27:
  3031  000E48  2EE8               	decfsz	wreg,f,c
  3032  000E4A  D7FE               	bra	i1u115_27
  3033  000E4C  D000               	nop2	
  3034  000E4E                     
  3035                           ;LCD.c: 70:     TRISCbits.RC2=0;
  3036  000E4E  5007               	movf	i1SendLCD@LowBits^0,w,c
  3037  000E50  ECD9  F006         	call	i1_LCDout
  3038  000E54                     
  3039                           ;LCD.c: 71: 
  3040  000E54  0E06               	movlw	6
  3041  000E56                     i1u116_27:
  3042  000E56  2EE8               	decfsz	wreg,f,c
  3043  000E58  D7FE               	bra	i1u116_27
  3044  000E5A  D000               	nop2	
  3045  000E5C  0012               	return		;funcret
  3046  000E5E                     __end_ofi1_SendLCD:
  3047                           	opt callstack 0
  3048                           
  3049 ;; *************** function i1_LCDout *****************
  3050 ;; Defined at:
  3051 ;;		line 41 in file "LCD.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  number          1    wreg     unsigned char 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  number          1    3[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3065 ;;      Params:         0       0       0       0
  3066 ;;      Locals:         1       0       0       0
  3067 ;;      Temps:          2       0       0       0
  3068 ;;      Totals:         3       0       0       0
  3069 ;;Total ram usage:        3 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    2
  3072 ;; This function calls:
  3073 ;;		i1_E_TOG
  3074 ;; This function is called by:
  3075 ;;		i1_SendLCD
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text20
  3080  000DB2                     __ptext20:
  3081                           	opt callstack 0
  3082  000DB2                     i1_LCDout:
  3083                           	opt callstack 21
  3084                           
  3085                           ;incstack = 0
  3086                           ;i1LCDout@number stored from wreg
  3087  000DB2  6E04               	movwf	i1LCDout@number^0,c
  3088  000DB4                     
  3089                           ;LCD.c: 46:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  3090  000DB4  CF8B F002          	movff	3979,??i1_LCDout	;volatile
  3091  000DB8  0EF9               	movlw	249
  3092  000DBA  1602               	andwf	??i1_LCDout^0,f,c
  3093  000DBC  C004  F003         	movff	i1LCDout@number,??i1_LCDout+1
  3094  000DC0  0E03               	movlw	3
  3095  000DC2  1603               	andwf	(??i1_LCDout+1)^0,f,c
  3096  000DC4  90D8               	bcf	status,0,c
  3097  000DC6  3403               	rlcf	(??i1_LCDout+1)^0,w,c
  3098  000DC8  1002               	iorwf	??i1_LCDout^0,w,c
  3099  000DCA  6E8B               	movwf	139,c	;volatile
  3100                           
  3101                           ;LCD.c: 47: 
  3102  000DCC  CF8C F002          	movff	3980,??i1_LCDout	;volatile
  3103  000DD0  0EFC               	movlw	252
  3104  000DD2  1602               	andwf	??i1_LCDout^0,f,c
  3105  000DD4  4004               	rrncf	i1LCDout@number^0,w,c
  3106  000DD6  42E8               	rrncf	wreg,f,c
  3107  000DD8  0B3F               	andlw	63
  3108  000DDA  0B03               	andlw	3
  3109  000DDC  1002               	iorwf	??i1_LCDout^0,w,c
  3110  000DDE  6E8C               	movwf	140,c	;volatile
  3111  000DE0                     
  3112                           ;LCD.c: 49:     LCDout(LowBits);
  3113  000DE0  EC6D  F007         	call	i1_E_TOG	;wreg free
  3114  000DE4                     
  3115                           ;LCD.c: 50:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  3116  000DE4  0E03               	movlw	3
  3117  000DE6                     i1u117_27:
  3118  000DE6  2EE8               	decfsz	wreg,f,c
  3119  000DE8  D7FE               	bra	i1u117_27
  3120  000DEA  F000               	nop	
  3121  000DEC  0012               	return		;funcret
  3122  000DEE                     __end_ofi1_LCDout:
  3123                           	opt callstack 0
  3124                           
  3125 ;; *************** function i1_E_TOG *****************
  3126 ;; Defined at:
  3127 ;;		line 28 in file "LCD.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3141 ;;      Params:         0       0       0       0
  3142 ;;      Locals:         0       0       0       0
  3143 ;;      Temps:          0       0       0       0
  3144 ;;      Totals:         0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		i1_LCDout
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text21
  3156  000EDA                     __ptext21:
  3157                           	opt callstack 0
  3158  000EDA                     i1_E_TOG:
  3159                           	opt callstack 21
  3160  000EDA                     
  3161                           ;LCD.c: 30: 
  3162  000EDA  808B               	bsf	139,0,c	;volatile
  3163  000EDC                     
  3164                           ;LCD.c: 32: 
  3165  000EDC  0E03               	movlw	3
  3166  000EDE                     i1u118_27:
  3167  000EDE  2EE8               	decfsz	wreg,f,c
  3168  000EE0  D7FE               	bra	i1u118_27
  3169  000EE2  F000               	nop	
  3170  000EE4                     
  3171                           ;LCD.c: 34: 
  3172  000EE4  908B               	bcf	139,0,c	;volatile
  3173  000EE6  0012               	return		;funcret
  3174  000EE8                     __end_ofi1_E_TOG:
  3175                           	opt callstack 0
  3176                           
  3177 ;; *************** function _my_hp_isr *****************
  3178 ;; Defined at:
  3179 ;;		line 268 in file "main.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3193 ;;      Params:         0       0       0       0
  3194 ;;      Locals:         0       0       0       0
  3195 ;;      Temps:          1       0       0       0
  3196 ;;      Totals:         1       0       0       0
  3197 ;;Total ram usage:        1 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		Interrupt level 2
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	intcode
  3207  000008                     __pintcode:
  3208                           	opt callstack 0
  3209  000008                     _my_hp_isr:
  3210                           	opt callstack 20
  3211                           
  3212                           ;incstack = 0
  3213  000008  8234               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3214  00000A  EF47  F005         	goto	int_func
  3215                           
  3216                           	psect	intcode_body
  3217  000A8E                     __pintcode_body:
  3218                           	opt callstack 20
  3219  000A8E                     int_func:
  3220                           	opt callstack 20
  3221  000A8E                     
  3222                           ;main.c: 271:     if (INTCONbits.INT0IF) {
  3223  000A8E  A2F2               	btfss	242,1,c	;volatile
  3224  000A90  EF4C  F005         	goto	i2u90_41
  3225  000A94  EF4E  F005         	goto	i2u90_40
  3226  000A98                     i2u90_41:
  3227  000A98  EF7D  F005         	goto	i2l113
  3228  000A9C                     i2u90_40:
  3229  000A9C                     
  3230                           ;main.c: 273:         debouncer += 1;
  3231  000A9C  2A32               	incf	_debouncer^0,f,c
  3232  000A9E                     
  3233                           ;main.c: 275:         if (debouncer == 30) {
  3234  000A9E  0E1E               	movlw	30
  3235  000AA0  1832               	xorwf	_debouncer^0,w,c
  3236  000AA2  A4D8               	btfss	status,2,c
  3237  000AA4  EF56  F005         	goto	i2u91_41
  3238  000AA8  EF58  F005         	goto	i2u91_40
  3239  000AAC                     i2u91_41:
  3240  000AAC  EF7D  F005         	goto	i2l113
  3241  000AB0                     i2u91_40:
  3242  000AB0                     
  3243                           ;main.c: 278:             debouncer = 0;
  3244  000AB0  0E00               	movlw	0
  3245  000AB2  6E32               	movwf	_debouncer^0,c
  3246                           
  3247                           ;main.c: 281:             IRsource = 0;
  3248  000AB4  0E00               	movlw	0
  3249  000AB6  0100               	movlb	0	; () banked
  3250  000AB8  6FFC               	movwf	_IRsource& (0+255),b
  3251                           
  3252                           ;main.c: 282:             RFIDread = 0;
  3253  000ABA  0E00               	movlw	0
  3254  000ABC  6FFD               	movwf	_RFIDread& (0+255),b
  3255                           
  3256                           ;main.c: 284:             robotOn = !robotOn;
  3257  000ABE  51FE               	movf	_robotOn& (0+255),w,b
  3258  000AC0  B4D8               	btfsc	status,2,c
  3259  000AC2  EF65  F005         	goto	i2u92_41
  3260  000AC6  EF68  F005         	goto	i2u92_40
  3261  000ACA                     i2u92_41:
  3262  000ACA  0E01               	movlw	1
  3263  000ACC  EF69  F005         	goto	i2u93_40
  3264  000AD0                     i2u92_40:
  3265  000AD0  0E00               	movlw	0
  3266  000AD2                     i2u93_40:
  3267  000AD2  6FFE               	movwf	_robotOn& (0+255),b
  3268                           
  3269                           ;main.c: 285:             reset = 1;
  3270  000AD4  0E01               	movlw	1
  3271  000AD6  6FFF               	movwf	_reset& (0+255),b
  3272  000AD8                     
  3273                           ; BSR set to: 0
  3274                           ;main.c: 287:             LATCbits.LATC4 = !LATCbits.LATC4 ;
  3275  000AD8  A88B               	btfss	139,4,c	;volatile
  3276  000ADA  EF71  F005         	goto	i2u94_41
  3277  000ADE  EF75  F005         	goto	i2u94_40
  3278  000AE2                     i2u94_41:
  3279  000AE2  6A01               	clrf	??_my_hp_isr^0,c
  3280  000AE4  2A01               	incf	??_my_hp_isr^0,f,c
  3281  000AE6  EF76  F005         	goto	i2u95_48
  3282  000AEA                     i2u94_40:
  3283  000AEA  6A01               	clrf	??_my_hp_isr^0,c
  3284  000AEC                     i2u95_48:
  3285  000AEC  3A01               	swapf	??_my_hp_isr^0,f,c
  3286  000AEE  508B               	movf	139,w,c	;volatile
  3287  000AF0  1801               	xorwf	??_my_hp_isr^0,w,c
  3288  000AF2  0BEF               	andlw	-17
  3289  000AF4  1801               	xorwf	??_my_hp_isr^0,w,c
  3290  000AF6  6E8B               	movwf	139,c	;volatile
  3291  000AF8                     
  3292                           ;main.c: 289:             INTCONbits.INT0IF = 0;
  3293  000AF8  92F2               	bcf	242,1,c	;volatile
  3294  000AFA                     i2l113:
  3295  000AFA  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3296  000AFC  0011               	retfie		f
  3297  000AFE                     __end_of_my_hp_isr:
  3298                           	opt callstack 0
  3299                           
  3300                           	psect	rparam
  3301  0000                     
  3302                           	psect	temp
  3303  000034                     btemp:
  3304                           	opt callstack 0
  3305  000034                     	ds	1
  3306  0000                     int$flags	set	btemp
  3307  0000                     wtemp8	set	btemp+1
  3308  0000                     ttemp5	set	btemp+1
  3309  0000                     ttemp6	set	btemp+4
  3310  0000                     ttemp7	set	btemp+8
  3311                           tosu	equ	0xFFF
  3312                           tosh	equ	0xFFE
  3313                           tosl	equ	0xFFD
  3314                           stkptr	equ	0xFFC
  3315                           pclatu	equ	0xFFB
  3316                           pclath	equ	0xFFA
  3317                           pcl	equ	0xFF9
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           indf0	equ	0xFEF
  3325                           postinc0	equ	0xFEE
  3326                           postdec0	equ	0xFED
  3327                           preinc0	equ	0xFEC
  3328                           plusw0	equ	0xFEB
  3329                           fsr0h	equ	0xFEA
  3330                           fsr0l	equ	0xFE9
  3331                           wreg	equ	0xFE8
  3332                           indf1	equ	0xFE7
  3333                           postinc1	equ	0xFE6
  3334                           postdec1	equ	0xFE5
  3335                           preinc1	equ	0xFE4
  3336                           plusw1	equ	0xFE3
  3337                           fsr1h	equ	0xFE2
  3338                           fsr1l	equ	0xFE1
  3339                           bsr	equ	0xFE0
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           preinc2	equ	0xFDC
  3344                           plusw2	equ	0xFDB
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    0
    Data        2
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      51
    BANK0           160    156     160
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    findStrengths@rightIR	PTR int  size(2) Largest target is 2
		 -> main@rightIR(BANK0[2]), 

    findStrengths@leftIR	PTR int  size(2) Largest target is 2
		 -> main@leftIR(BANK0[2]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[6]), 

    move@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    move@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    move@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    move@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    move@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    move@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorsFullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorsFullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorsFullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    setMotorsFullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorsFullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorsFullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), main@motorR(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S434DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S434DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_move
    _move->_setMotorsFullSpeed
    _move->_stop
    _stop->_setMotorPWM
    _setMotorsFullSpeed->_setMotorPWM
    _setMotorPWM->___wmul
    _initLCD->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _my_lp_isr in COMRAM

    _sendRFID->_LCD_String
    _SetLine->i1_SendLCD
    _LCD_String->i1_SendLCD
    i1_SendLCD->i1_LCDout

Critical Paths under _my_hp_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_lp_isr in BANK0

    None.

Critical Paths under _my_hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_lp_isr in BANK1

    None.

Critical Paths under _my_hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_lp_isr in BANK2

    None.

Critical Paths under _my_hp_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               159   159      0   10098
                                             43 COMRAM     3     3      0
                                              0 BANK0    156   156      0
                      _findStrengths
                         _initEusart
                             _initIR
                            _initLCD
                            _initPWM
                               _move
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _move                                                 5     0      5    4328
                                             38 COMRAM     5     0      5
                 _setMotorsFullSpeed
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    1658
                                             33 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorsFullSpeed                                   5     1      4    1354
                                             33 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          8     6      2    1092
                                             25 COMRAM     8     6      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     257
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     830
                                             26 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              4     3      1     786
                                             22 COMRAM     4     3      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               3     3      0      44
                                             19 COMRAM     3     3      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initEusart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _findStrengths                                        8     4      4     652
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _my_lp_isr                                            8     8      0    1100
                                             11 COMRAM     8     8      0
                           _sendRFID
 ---------------------------------------------------------------------------------
 (6) _sendRFID                                             0     0      0    1099
                         _LCD_String
                            _SetLine
                      _getCharSerial
                          i1_SendLCD
 ---------------------------------------------------------------------------------
 (7) _getCharSerial                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetLine                                              1     1      0     330
                                              8 COMRAM     1     1      0
                          i1_SendLCD
 ---------------------------------------------------------------------------------
 (7) _LCD_String                                           3     1      2     483
                                              8 COMRAM     3     1      2
                          i1_SendLCD
 ---------------------------------------------------------------------------------
 (7) i1_SendLCD                                            4     3      1     286
                                              4 COMRAM     4     3      1
                           i1_LCDout
 ---------------------------------------------------------------------------------
 (8) i1_LCDout                                             3     3      0      44
                                              1 COMRAM     3     3      0
                            i1_E_TOG
 ---------------------------------------------------------------------------------
 (9) i1_E_TOG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _my_hp_isr                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _findStrengths
   _initEusart
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initPWM
   _move
     _setMotorsFullSpeed
       _setMotorPWM
         ___wmul
     _stop
       _setMotorPWM
         ___wmul
   _setMotorPWM
     ___wmul
   _stop
     _setMotorPWM
       ___wmul

 _my_lp_isr (ROOT)
   _sendRFID
     _LCD_String
       i1_SendLCD
         i1_LCDout
           i1_E_TOG
     _SetLine
       i1_SendLCD
         i1_LCDout
           i1_E_TOG
     _getCharSerial
     i1_SendLCD
       i1_LCDout
         i1_E_TOG

 _my_hp_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       3        0.0%
DATA                 0      0      D3      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Dec 10 12:17:08 2019

                          _a 002F                           l67 0310                           l69 031E  
                         l99 070E                           bsr 000FE0          ___wmul@multiplicand 0016  
                ?_LCD_String 0009                          l140 0EB8                          l204 0BAE  
                        l231 0DB0                          l207 0C56                          l312 0E82  
                        l234 0E24                          l228 0ED8                          l237 0A8C  
                        l192 08CC                          l185 0B56                          l274 0EA0  
                        l277 0CA0                          l198 0C06                          u600 0C06  
                        u505 0770                          u601 0C02                          u515 0788  
                        u540 0872                          u541 086E                          u525 07CC  
                        u615 0DF8                          u535 07E4                          u616 0DFA  
                        u800 0552                          u720 031E                          u801 054E  
                        u721 031A                          u554 0890                          u490 0764  
                        u810 0580                          u730 03D0                          u555 088C  
                        u491 0760                          u811 057C                          u731 03CC  
                        u564 08BE                          u580 0BAE                          u820 05DA  
                        u740 0440                          u565 08BA                          u581 0BAA  
                        u821 05D6                          u741 043C                          u830 05EA  
                        u750 045C                          u831 05E6                          u751 0458  
                        u840 061C                          u760 046C                          u841 0618  
                        u761 0468                          u850 064A                          u770 047C  
                        u851 0646                          u771 0478                          u860 06A4  
                        u780 0490                          u861 06A0                          u781 048C  
                        u870 06B4                          u790 04CE                          u871 06B0  
                        u791 04CA                          u880 06C8                          u881 06C4  
                        u890 070A                          u891 0706                          u977 0B84  
                        u987 0BDC                          u997 09E6                          wreg 000FE8  
               __CFG_LVP$OFF 000000                         l1401 0ECE                         l1403 0ED6  
                       l1405 0E5E                         l1421 0764                         l1407 0E7A  
                       l1431 0834                         l1423 079C                         l1521 0EA6  
                       l1441 0DA4                         l1433 0856                         l1425 07C0  
                       l1417 0716                         l1531 0EB6                         l1523 0EAE  
                       l1443 0DA8                         l1435 0872                         l1427 07F8  
                       l1419 0748                         l1525 0EB0                         l1541 09EE  
                       l1533 0AFE                         l1437 08A0                         l1429 0814  
                       l1461 0B74                         l1527 0EB2                         l1519 0EA2  
                       l1439 0D78                         l1551 0A24                         l1543 09F4  
                       l1535 0B0E                         l1463 0B7E                         l1703 0494  
                       l1711 04E6                         l1631 032E                         l1529 0EB4  
                       l1561 0A72                         l1553 0A36                         l1545 0A08  
                       l1537 09C8                         l1481 0BD6                         l1465 0B8C  
                       l1457 0B58                         l1721 0552                         l1713 04FE  
                       l1705 0496                         l1641 0338                         l1633 0330  
                       l1571 0E90                         l1491 0E06                         l1563 0A7A  
                       l1555 0A3E                         l1547 0A10                         l1539 09E0  
                       l1483 0BE4                         l1475 0BB0                         l1459 0B5C  
                       l1467 0B96                         l1731 05AA                         l1723 0558  
                       l1715 0510                         l1707 04BC                         l1651 034A  
                       l1643 033A                         l1635 0332                         l1627 030C  
                       l1573 0E92                         l1565 0E84                         l1493 0E0E  
                       l1557 0A50                         l1549 0A1E                         l1477 0BB4  
                       l1485 0BEE                         l1581 0C42                         l1725 056C  
                       l1741 05F2                         l1717 0512                         l1709 04CE  
                       l1661 0374                         l1653 0350                         l1645 033E  
                       l1637 0334                         l1629 032A                         l1575 0C58  
                       l1567 0E8C                         l1399 0ECC                         l1495 0E16  
                       l1487 0DF0                         l1559 0A5A                         l1479 0BCC  
                       l1751 0662                         l1743 061C                         l1727 0580  
                       l1735 05B0                         l1719 0526                         l1671 03AC  
                       l1663 0388                         l1655 0364                         l1647 0342  
                       l1639 0336                         l1569 0E8E                         l1497 0E1C  
                       l1489 0DFA                         l1577 0C08                         l1753 0674  
                       l1745 0622                         l1737 05DA                         l1729 0598  
                       l1681 03E4                         l1673 03B2                         l1665 038C  
                       l1657 0368                         l1649 0346                         l1579 0C2E  
                       l1771 06E8                         l1747 0636                         l1739 05EA  
                       l1691 0440                         l1683 03F8                         l1763 06B8  
                       l1675 03B6                         l1667 0394                         l1659 0370  
                       l1773 06EA                         l1765 06C8                         l1749 064A  
                       l1757 067A                         l1693 045C                         l1685 0410  
                       l1677 03BE                         l1669 03A0                         l1775 06FA  
                       l1767 06DC                         l1759 06A4                         l1695 046C  
                       l1687 0422                         l1679 03D0                         l1769 06E2  
                       l1697 047C                         l1689 0424                         l1699 0480  
                       STR_1 0304                         STR_2 0301                         u1007 09FA  
                       u1017 0A0A                         u1107 0E1E                         u1027 0A18  
                       u1117 0DAA                         u1037 0A26                         u1127 0ED0  
                       u1047 0A38                         u1057 0A4A                         u1067 0A60  
                       u1077 0A74                         _LATB 000F8A                         u1087 0A86  
                       _LATC 000F8B                         _LATD 000F8C                         u1097 0E10  
                       _PIR1 000F9E              __end_ofi1_E_TOG 0EE8              ??_findStrengths 0018  
                main@rightIR 00E7                         _main 030C                         _move 0C08  
                       fsr2h 000FDA                         indf2 000FDF                         fsr2l 000FD9  
                       btemp 0034                         _stop 0B58                         prodh 000FF4  
                       prodl 000FF3                         start 0076                 ___param_bank 000000  
            __end_of_SendLCD 0E26              __end_of_SetLine 0D76                        ?_main 0001  
                      ?_move 0027                        ?_stop 0022                        _PDC0H 000F78  
                      _PDC1H 000F76                        _PDC0L 000F79                        _PDC2H 000F74  
                      _PDC1L 000F77                        _PDC3H 000F72                        _PDC2L 000F75  
                      _PDC3L 000F73                        _T5CON 000FB7                        i1l301 093A  
                      i1l231 0DEC                        i1l143 0EBA                        i1l119 0056  
                      i1l234 0E5C                        i1l146 0ECA                        i1l243 0D74  
                      i1l228 0EE6                        i1l309 09C6                        i2l113 0AFA  
                      i1l249 0CE8             __end_ofi1_LCDout 0DEE                        _RCREG 000FAE  
                      _E_TOG 0ECC                        _SPBRG 000FAF              __end_of_initLCD 0A8E  
            __end_of_initPWM 0B58                        _index 0033                        _reset 00FF  
         __size_ofi1_SendLCD 0038                        main@c 00E4                        main@i 00E9  
                      tablat 000FF5                        ttemp5 0035                        ttemp6 0038  
                      ttemp7 003C                        status 000FD8                        wtemp8 0035  
        __size_of_LCD_String 0048               __CFG_MCLRE$OFF 000000              __initialization 0CEA  
               __end_of_main 0716                 __end_of_move 0C58                 __end_of_stop 0BB0  
             __CFG_OSC$IRCIO 000000             LCD_String@string 0009                       ??_main 002C  
                     ??_move 002C                       ??_stop 0026                __activetblptr 000001  
                     ?_E_TOG 0001                    ??i1_E_TOG 0002                 ?_setMotorPWM 001A  
                     _ANSEL0 000FB8                       _ANSEL1 000FB9                       i1l1411 0DB4  
                     i1l1413 0DE0                       i1l1501 0D42                       i1l1415 0DE4  
                     i1l1511 0CA6                       i1l1503 0D50                       i1l1513 0CBA  
                     i1l1505 0D62                       i1l1601 0934                       i1l1451 0E46  
                     i1l1515 0CBE                       i1l1507 0D6C                       i1l1611 0972  
                     i1l1603 0940                       i1l1453 0E4E                       i1l1445 0E28  
                     i1l1517 0CCC                       i1l1509 0CA2                       i1l1613 0984  
                     i1l1621 09AC                       i1l1605 094E                       i1l1455 0E54  
                     i1l1447 0E32                       i1l1471 0EC8                       i1l1615 098A  
                     i1l1623 09B0                       i1l1607 0958                       i1l1393 0EDA  
                     i1l1449 0E3E                       i1l1617 099A                       i1l1609 0968  
                     i1l1625 09B4                       i1l1395 0EDC                       i1l1619 09A0  
                     i1l1397 0EE4                       i1l1469 0EBA                       i1l1591 08FA  
                     i1l1583 08CE                       i1l1593 0900                       i1l1585 08DE  
                     i1l1499 0D32                       i1l1595 0910                       i1l1587 08E4  
                     i1l1597 091A                       i1l1599 092A                       i1l1791 0044  
                     i1l1793 0048                       i1l1795 004E                       i1l1797 0052  
                     i1l1789 0036                       i1l1799 0054               __CFG_WDTEN$OFF 000000  
                     i2l1781 0A9E                       i2l1783 0AB0                       i2l1785 0AD8  
                     i2l1777 0A8E                       i2l1787 0AF8                       i2l1779 0A9C  
                     _LCDout 0D76                  SendLCD@Byte 001A                       _OSCCON 000FD3  
      __end_of_getCharSerial 0ECC                       _PTCON0 000F7F                       _PTCON1 000F7E  
                     _SPBRGH 000FB0                       _PTPERH 000F7A                       _PTPERL 000F7B  
                SendLCD@type 0017                    ??_SendLCD 0018                    ??_SetLine 0009  
                     ___wmul 0E5E            __end_ofi1_SendLCD 0E5E                       _initIR 0E84  
           __end_of_sendRFID 09C8                    ??_initLCD 001B                    ??_initPWM 0014  
               __pdataCOMRAM 0033                       move@mL 0027                       move@mR 0029  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                       stop@mL 0022                       stop@mR 0024  
                 __accesstop 0060      __end_of__initialization 0D1E                ___rparam_used 000001  
                SetLine@line 0009                __end_of_E_TOG 0EDA                    ?i1_LCDout 0001  
             __pcstackCOMRAM 0001                 __pidataBANK0 0EE9           _setMotorsFullSpeed 0BB0  
               ??_LCD_String 000B          ?_setMotorsFullSpeed 0022                      ??_E_TOG 0014  
                 __pbssBANK0 00FC                      ?_LCDout 0001         ??_setMotorsFullSpeed 0026  
         __end_of_LCD_String 0CEA                   ??i1_LCDout 0002                      ?___wmul 0014  
                    _CAP2CON 000F62                      _CAP3CON 000F61                      ?_initIR 0001  
         __size_of_my_hp_isr 0AF6           __size_of_my_lp_isr 005E                      i1_E_TOG 0EDA  
                    i1u62_20 0D42                      i1u70_20 0984                      i1u62_21 0D3E  
                    i1u70_21 0980                      i1u63_20 0D62                      i1u71_20 09C6  
                    i1u63_21 0D5E                      i1u71_21 09C2                      i1u64_20 0CE8  
                    i1u64_21 0CE4                      i1u65_20 08F6                      i1u65_21 08F2  
                    i1u57_25 0E30                      i1u57_26 0E32                      i1u66_20 0910  
                    i1u66_21 090C                      i1u59_20 0EC8                      i1u67_20 092A  
                    i1u59_21 0EC4                      i1u67_21 0926                      i1u68_20 094E  
                    i1u68_21 094A                      i1u69_20 0968                      i1u69_21 0964  
                    i1u96_20 0044                      i1u96_21 0040                      i2u90_40 0A9C  
                    i2u90_41 0A98                      i2u91_40 0AB0                      i2u91_41 0AAC  
                    i2u92_40 0AD0                      i2u92_41 0ACA                      i2u93_40 0AD2  
                    i2u94_40 0AEA                      i2u94_41 0AE2                      i2u95_48 0AEC  
                    _PWMCON0 000F6F         findStrengths@rightIR 0016                      _PWMCON1 000F6E  
       __size_of_setMotorPWM 01B8              __size_of_LCDout 003C                    ?_sendRFID 0001  
      __end_of_findStrengths 0CA2                      _SendLCD 0DEE                      __Hparam 0000  
                    _SetLine 0D30                      __Lparam 0000                   _initEusart 0EA2  
            __size_of___wmul 0026                 __psmallconst 0300                   _currentVal 0031  
            __size_of_initIR 001E                      __pcinit 0CEA                      __ramtop 0300  
                    __ptext0 030C                      __ptext1 0C08                      __ptext2 0B58  
                    __ptext3 0BB0                      __ptext4 0716                      __ptext5 0E5E  
                    __ptext6 0AFE                      __ptext7 09C8                      __ptext8 0DEE  
                    __ptext9 0D76                      _initLCD 09C8                      _initPWM 0AFE  
               LCDout@number 0016                      _robotOn 00FE               __pintcode_body 0A8E  
       end_of_initialization 0D1E           setMotorPWM@PWMduty 0020                      int_func 0A8E  
          __end_of_my_hp_isr 0AFE            __end_of_my_lp_isr 0076                   ??_sendRFID 000C  
                    move@dir 002B               SendLCD@LowBits 0019                    _RCSTAbits 000FAB  
                    postdec2 000FDD                      postinc2 000FDE                    i1_SendLCD 0E26  
          i1SendLCD@HighBits 0006                    _TRISAbits 000F92                    _TRISBbits 000F93  
                  _TRISCbits 000F94                    _TRISDbits 000F95               i1LCDout@number 0004  
                 main@buffer 00E2                   main@leftIR 00E5               __end_of_LCDout 0DB2  
                  _TXSTAbits 000FAC                   main@motorL 00F3                   main@motorR 00EA  
                ?_initEusart 0001            __size_ofi1_LCDout 003C               __end_of___wmul 0E84  
                _BAUDCONbits 000FAA                __pidataCOMRAM 0EE8               __end_of_initIR 0EA2  
     __size_of_getCharSerial 0012                   ?i1_SendLCD 0005          start_initialization 0CEA  
                   ??_LCDout 0014                     ??___wmul 0018                  __pdataBANK0 00FF  
                   ??_initIR 0014                  __pbssCOMRAM 002F                __pcstackBANK0 0060  
                   ?i1_E_TOG 0001          __size_of_initEusart 0018                _getCharSerial 0EBA  
__size_of_setMotorsFullSpeed 0058                     ?_SendLCD 0017                    _debouncer 0032  
                   ?_SetLine 0001            __size_of_sendRFID 00FA                    __pintcode 0008  
                __pintcodelo 0018          findStrengths@leftIR 0014                     _CAP2BUFH 000F67  
                   _CAP2BUFL 000F66                     _CAP3BUFH 000F65                     _CAP3BUFL 000F64  
                ??i1_SendLCD 0006                     ?_initLCD 0001                     ?_initPWM 0001  
                __smallconst 0300               __size_of_E_TOG 000E                ??_setMotorPWM 001C  
             ?_getCharSerial 0001                i1SendLCD@Byte 0008               ___wmul@product 0018  
                   _LATAbits 000F89                     _LATBbits 000F8A                     _LATCbits 000F8B  
                   _LATDbits 000F8C                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
              i1SendLCD@type 0005                     i1u113_27 0D6E                     i1u114_27 0CC4  
                   i1u115_27 0E48                     i1u116_27 0E56                     i1u117_27 0DE6  
                   i1u118_27 0EDE                     i1_LCDout 0DB2                     _PIR1bits 000F9E  
                  _my_hp_isr 0008                     _RFIDread 00FD                    _my_lp_isr 0018  
                   _RCONbits 000FD0            ___wmul@multiplier 0014             i1SendLCD@LowBits 0007  
               setMotorPWM@m 001A                     _IRsource 00FC       __size_of_findStrengths 004A  
       setMotorsFullSpeed@mL 0022         setMotorsFullSpeed@mR 0024             __size_ofi1_E_TOG 000E  
        __end_of_setMotorPWM 08CE                     __Hrparam 0000             __size_of_SendLCD 0038  
                 ?_my_hp_isr 0001                     __Lrparam 0000             __size_of_SetLine 0046  
                 ?_my_lp_isr 0001                 __Lsmallconst 0300                 ??_initEusart 0014  
                   _checkSum 0030             __size_of_initLCD 00C6             __size_of_initPWM 005A  
                   __ptext10 0ECC                     __ptext11 0E84                     __ptext20 0DB2  
                   __ptext12 0EA2                     __ptext21 0EDA                     __ptext13 0C58  
                   __ptext15 08CE                     __ptext16 0EBA                     __ptext17 0D30  
                   __ptext18 0CA2                     __ptext19 0E26              ??_getCharSerial 0002  
         __end_of_initEusart 0EBA                __size_of_main 040A                __size_of_move 0050  
              __size_of_stop 0058                     _sendRFID 08CE                _findStrengths 0C58  
                   int$flags 0034                     main@path 0060                   _LCD_String 0CA2  
                 _INTCONbits 000FF2              SendLCD@HighBits 0018                  _setMotorPWM 0716  
                   intlevel1 0000                     intlevel2 0000               ?_findStrengths 0014  
                 _OSCCONbits 000FD3                  ??_my_hp_isr 0001                  ??_my_lp_isr 000C  
 __end_of_setMotorsFullSpeed 0C08  
